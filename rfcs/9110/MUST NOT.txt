- section-2.2-5: 
   A sender <bcp14>MUST NOT</bcp14> generate protocol elements that do not match the grammar
   defined by the corresponding ABNF rules.
   Within a given message, a sender <bcp14>MUST NOT</bcp14> generate protocol elements or
   syntax alternatives that are only allowed to be generated by participants in
   other roles (i.e., a role that the sender does not have for that message).

- section-2.2-5: 
   A sender <bcp14>MUST NOT</bcp14> generate protocol elements that do not match the grammar
   defined by the corresponding ABNF rules.
   Within a given message, a sender <bcp14>MUST NOT</bcp14> generate protocol elements or
   syntax alternatives that are only allowed to be generated by participants in
   other roles (i.e., a role that the sender does not have for that message).

- section-3.3-5: 
   As a result, a server <bcp14>MUST NOT</bcp14>
   assume that two requests on the same connection are from the same user
   agent unless the connection is secured and specific to that agent.
   Some non-standard HTTP extensions (e.g., <xref target="RFC4559" format="default" sectionFormat="of" derivedContent="RFC4559"/>) have
   been known to violate this requirement, resulting in security and
   interoperability problems.

- section-4.2.1-4: 
   A sender <bcp14>MUST NOT</bcp14> generate an "http" URI with an empty host identifier.
   A recipient that processes such a URI reference <bcp14>MUST</bcp14> reject it as invalid.

- section-4.2.2-4: 
   A sender <bcp14>MUST NOT</bcp14> generate an "https" URI with an empty host identifier.
   A recipient that processes such a URI reference <bcp14>MUST</bcp14> reject it as invalid.

- section-4.2.4-3: 
   A sender <bcp14>MUST NOT</bcp14> generate the userinfo subcomponent (and its "@"
   delimiter) when an "http" or "https" URI reference is generated within a
   message as a target URI or field value.

- section-4.3.4-3: 
   A reference identity of type CN-ID <bcp14>MUST NOT</bcp14> be used by clients.  As noted
   in <xref target="RFC6125" section="6.2.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc6125#section-6.2.1" derivedContent="RFC6125"/>, a reference
   identity of type CN-ID might be used by older clients.

- section-5.3-2: 
   The order in which field lines with the
   same name are received is therefore significant to the interpretation of
   the field value; a proxy <bcp14>MUST NOT</bcp14> change the order of these field line
   values when forwarding a message.

- section-5.3-3: 
   This means that, aside from the well-known exception noted below, a sender
   <bcp14>MUST NOT</bcp14> generate multiple field lines with the same name in a message
   (whether in the headers or trailers) or append a field line when a field
   line of the same name already exists in the message, unless that field's
   definition allows multiple field line values to be recombined as a
   comma-separated list (i.e., at least one alternative of the field's
   definition allows a comma-separated list, such as an ABNF rule of
   #(values) defined in <xref target="abnf.extension" format="default" sectionFormat="of" derivedContent="Section 5.6.1"/>).

- section-5.3-6: 
   A server <bcp14>MUST NOT</bcp14> apply a request to the target resource until it
   receives the entire request header section, since later header field lines
   might include conditionals, authentication credentials, or deliberately
   misleading duplicate header fields that could impact request processing.

- section-5.6.1.1-1: 
   In any production that uses the list construct, a sender <bcp14>MUST NOT</bcp14>
   generate empty list elements. In other words, a sender has to generate
   lists that satisfy the following syntax:

- section-5.6.3-5: 
   The BWS rule is used where the grammar allows optional whitespace only for
   historical reasons. A sender <bcp14>MUST NOT</bcp14> generate BWS in messages.
   A recipient <bcp14>MUST</bcp14> parse for such bad whitespace and remove it before
   interpreting the protocol element.

- section-5.6.7-17: 
   A sender <bcp14>MUST NOT</bcp14> generate additional whitespace in an HTTP-date beyond
   that specifically included as SP in the grammar.
   The semantics of <xref target="preferred.date.format" format="none" sectionFormat="of" derivedContent="">day-name</xref>, <xref target="preferred.date.format" format="none" sectionFormat="of" derivedContent="">day</xref>,
   <xref target="preferred.date.format" format="none" sectionFormat="of" derivedContent="">month</xref>, <xref target="preferred.date.format" format="none" sectionFormat="of" derivedContent="">year</xref>, and <xref target="preferred.date.format" format="none" sectionFormat="of" derivedContent="">time-of-day</xref>
   are the same as those defined for the Internet Message Format constructs
   with the corresponding name (<xref target="RFC5322" sectionFormat="comma" section="3.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc5322#section-3.3" derivedContent="RFC5322"/>).

- section-6.2-5: 
   A client <bcp14>SHOULD</bcp14> send a request version equal to the highest
   version to which the client is conformant and
   whose major version is no higher than the highest version supported
   by the server, if this is known.  A client <bcp14>MUST NOT</bcp14> send a
   version to which it is not conformant.

- section-6.2-7: 
   A server <bcp14>SHOULD</bcp14> send a response version equal to the highest version to
   which the server is conformant that has a major version less than or equal
   to the one received in the request.
   A server <bcp14>MUST NOT</bcp14> send a version to which it is not conformant.
   A server can send a <xref target="status.505" format="none" sectionFormat="of" derivedContent="">505 (HTTP Version Not Supported)</xref>
   response if it wishes, for any reason, to refuse service of the client's
   major protocol version.

- section-6.5.1-2: 
   Many fields cannot be processed outside the header section because
   their evaluation is necessary prior to receiving the content, such as
   those that describe message framing, routing, authentication,
   request modifiers, response controls, or content format.
   A sender <bcp14>MUST NOT</bcp14> generate a trailer field unless the sender knows the
   corresponding header field name's definition permits the field to be sent
   in trailers.

- section-6.5.1-3: 
   Trailer fields can be difficult to process by intermediaries that forward
   messages from one protocol version to another. If the entire message can be
   buffered in transit, some intermediaries could merge trailer fields into
   the header section (as appropriate) before it is forwarded. However, in
   most cases, the trailers are simply discarded.
   A recipient <bcp14>MUST NOT</bcp14> merge a trailer field into a header section unless
   the recipient understands the corresponding header field definition and
   that definition explicitly permits and defines how trailer field values
   can be safely merged.

- section-6.6.1-7: 
   An origin server without a clock <bcp14>MUST NOT</bcp14> generate a Date header field.

- section-7.1-6: 
   See the respective method definitions for details. These forms <bcp14>MUST NOT</bcp14>
   be used with other methods.

- section-7.6-4: 
   An intermediary <bcp14>MUST NOT</bcp14> forward a message to itself unless it is
   protected from an infinite request loop. In general, an intermediary ought
   to recognize its own server names, including any aliases, local variations,
   or literal IP addresses, and respond to such requests directly.

- section-7.6.1-9: 
   A sender <bcp14>MUST NOT</bcp14> send a connection option corresponding to a
   field that is intended for all recipients of the content.
   For example, Cache-Control is never appropriate as a
   connection option (<xref target="CACHING" section="5.2" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.2" derivedContent="CACHING"/>).

- section-7.6.2-4: 
   Each intermediary that receives a TRACE or OPTIONS request containing a
   Max-Forwards header field <bcp14>MUST</bcp14> check and update its value prior to
   forwarding the request. If the received value is zero (0), the intermediary
   <bcp14>MUST NOT</bcp14> forward the request; instead, the intermediary <bcp14>MUST</bcp14> respond as
   the final recipient. If the received Max-Forwards value is greater than
   zero, the intermediary <bcp14>MUST</bcp14> generate an updated Max-Forwards field in the
   forwarded message with a field value that is the lesser of a) the received
   value decremented by one (1) or b) the recipient's maximum supported value
   for Max-Forwards.

- section-7.6.3-15: 
   A sender <bcp14>SHOULD NOT</bcp14> combine multiple list members unless they are all
   under the same organizational control and the hosts have already been
   replaced by pseudonyms. A sender <bcp14>MUST NOT</bcp14> combine members that
   have different received-protocol values.

- section-7.7-3: 
   If a proxy receives a target URI with a host name that is not a
   fully qualified domain name, it <bcp14>MAY</bcp14> add its own domain to the host name
   it received when forwarding the request.  A proxy <bcp14>MUST NOT</bcp14> change the
   host name if the target URI contains a fully qualified domain name.

- section-7.7-4: 
   A proxy <bcp14>MUST NOT</bcp14> modify the "absolute-path" and "query" parts of the
   received target URI when forwarding it to the next inbound server except
   as required by that forwarding protocol. For example, a proxy forwarding
   a request to an origin server via HTTP/1.1 will replace an empty path with
   "/" (<xref target="HTTP11" section="3.2.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-3.2.1" derivedContent="HTTP/1.1"/>) or "*" (<xref target="HTTP11" section="3.2.4" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-3.2.4" derivedContent="HTTP/1.1"/>),
   depending on the request method.

- section-7.7-5: 
   A proxy <bcp14>MUST NOT</bcp14> transform the content (<xref target="content" format="default" sectionFormat="of" derivedContent="Section 6.4"/>) of a
   response message that contains a no-transform cache directive
   (<xref target="CACHING" section="5.2.2.6" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.2.2.6" derivedContent="CACHING"/>). Note that this
   does not apply to message transformations that do not change the content,
   such as the addition or removal of transfer codings
   (<xref target="HTTP11" section="7" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-7" derivedContent="HTTP/1.1"/>).

- section-7.8-5: 
   A server that sends a <xref target="status.101" format="none" sectionFormat="of" derivedContent="">101 (Switching Protocols)</xref> response
   <bcp14>MUST</bcp14> send an Upgrade header field to indicate the new protocol(s) to
   which the connection is being switched; if multiple protocol layers are
   being switched, the sender <bcp14>MUST</bcp14> list the protocols in layer-ascending
   order. A server <bcp14>MUST NOT</bcp14> switch to a protocol that was not indicated by
   the client in the corresponding request's Upgrade header field.
   A server <bcp14>MAY</bcp14> choose to ignore the order of preference indicated by the
   client and select the new protocol(s) based on other factors, such as the
   nature of the request or the current load on the server.

- section-7.8-11: 
   For example, if the Upgrade header field is received in a GET request
   and the server decides to switch protocols, it first responds
   with a <xref target="status.101" format="none" sectionFormat="of" derivedContent="">101 (Switching Protocols)</xref> message in HTTP/1.1 and
   then immediately follows that with the new protocol's equivalent of a
   response to a GET on the target resource.  This allows a connection to be
   upgraded to protocols with the same semantics as HTTP without the
   latency cost of an additional round trip.  A server <bcp14>MUST NOT</bcp14> switch
   protocols unless the received message semantics can be honored by the new
   protocol; an OPTIONS request can be honored by any protocol.

- section-8.6-6: 
   A server <bcp14>MAY</bcp14> send a Content-Length header field in a response to a HEAD
   request (<xref target="HEAD" format="default" sectionFormat="of" derivedContent="Section 9.3.2"/>); a server <bcp14>MUST NOT</bcp14> send Content-Length in such a
   response unless its field value equals the decimal number of octets that
   would have been sent in the content of a response if the same
   request had used the GET method.

- section-8.6-7: 
   A server <bcp14>MAY</bcp14> send a Content-Length header field in a
   <xref target="status.304" format="none" sectionFormat="of" derivedContent="">304 (Not Modified)</xref> response to a conditional GET request
   (<xref target="status.304" format="default" sectionFormat="of" derivedContent="Section 15.4.5"/>); a server <bcp14>MUST NOT</bcp14> send Content-Length in such a
   response unless its field value equals the decimal number of octets that
   would have been sent in the content of a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref>
   response to the same request.

- section-8.6-8: 
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any response
   with a status code of
   <xref target="status.1xx" format="none" sectionFormat="of" derivedContent="">1xx (Informational)</xref> or <xref target="status.204" format="none" sectionFormat="of" derivedContent="">204 (No Content)</xref>.
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any
   <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref> response to a CONNECT request (<xref target="CONNECT" format="default" sectionFormat="of" derivedContent="Section 9.3.6"/>).

- section-8.6-8: 
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any response
   with a status code of
   <xref target="status.1xx" format="none" sectionFormat="of" derivedContent="">1xx (Informational)</xref> or <xref target="status.204" format="none" sectionFormat="of" derivedContent="">204 (No Content)</xref>.
   A server <bcp14>MUST NOT</bcp14> send a Content-Length header field in any
   <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref> response to a CONNECT request (<xref target="CONNECT" format="default" sectionFormat="of" derivedContent="Section 9.3.6"/>).

- section-8.6-12: 
   As a result, a sender <bcp14>MUST NOT</bcp14> forward a message with a
   Content-Length header field value that is known to be incorrect.

- section-8.6-13: 
   Likewise, a sender <bcp14>MUST NOT</bcp14> forward a message with a Content-Length
   header field value that does not match the ABNF above, with one exception:
   a recipient of a Content-Length header field value consisting of the same
   decimal value repeated as a comma-separated list (e.g,
   "Content-Length: 42, 42") <bcp14>MAY</bcp14> either reject the message as invalid or
   replace that invalid field value with a single instance of the decimal
   value, since this likely indicates that a duplicate was generated or
   combined by an upstream message processor.

- section-8.7-9: 
   An origin server that receives a Content-Location field in a request
   message <bcp14>MUST</bcp14> treat the information as transitory request context rather
   than as metadata to be saved verbatim as part of the representation.
   An origin server <bcp14>MAY</bcp14> use that context to guide in processing the
   request or to save it for other uses, such as within source links or
   versioning metadata. However, an origin server <bcp14>MUST NOT</bcp14> use such context
   information to alter the request semantics.

- section-8.8.2.1-4: 
   An origin server with a clock (as defined in <xref target="http.date" format="default" sectionFormat="of" derivedContent="Section 5.6.7"/>)
   <bcp14>MUST NOT</bcp14> generate a Last-Modified date that is later than the
   server's time of message origination
   (<xref target="field.date" format="none" sectionFormat="of" derivedContent="">Date</xref>, <xref target="field.date" format="default" sectionFormat="of" derivedContent="Section 6.6.1"/>).
   If the last modification time is derived from implementation-specific
   metadata that evaluates to some time in the future, according to the
   origin server's clock, then the origin server <bcp14>MUST</bcp14> replace that
   value with the message origination date. This prevents a future
   modification date from having an adverse impact on cache validation.

- section-8.8.2.1-5: 
   An origin server without a clock <bcp14>MUST NOT</bcp14> generate a Last-Modified
   date for a response unless that date value was assigned to the resource
   by some other system (presumably one with a clock).

- section-9.2.2-7: 
   A proxy <bcp14>MUST NOT</bcp14> automatically retry non-idempotent requests.
   A client <bcp14>SHOULD NOT</bcp14> automatically retry a failed automatic retry.

- section-9.3.2-1: 
   The HEAD method is identical to GET except that the server <bcp14>MUST NOT</bcp14>
   send content in the response. HEAD is used to obtain metadata about the
   <xref target="selected.representation" format="none" sectionFormat="of" derivedContent="">selected representation</xref> without transferring its
   representation data, often for the sake of testing hypertext links or
   finding recent modifications.

- section-9.3.4-8: 
   An origin server <bcp14>MUST NOT</bcp14> send a validator field
   (<xref target="response.validator" format="default" sectionFormat="of" derivedContent="Section 8.8"/>), such as an <xref target="field.etag" format="none" sectionFormat="of" derivedContent="">ETag</xref> or
   <xref target="field.last-modified" format="none" sectionFormat="of" derivedContent="">Last-Modified</xref> field, in a successful response to PUT unless
   the request's representation data was saved without any transformation
   applied to the content (i.e., the resource's new representation data is
   identical to the content received in the PUT request) and the
   validator field value reflects the new representation.
   This requirement allows a user agent to know when the representation it
   sent (and retains in memory) is the result of the PUT, and thus it doesn't
   need to be retrieved again from the origin server. The new validator(s)
   received in the response can be used for future conditional requests in
   order to prevent accidental overwrites (<xref target="preconditions" format="default" sectionFormat="of" derivedContent="Section 13.1"/>).

- section-9.3.6-12: 
   A server <bcp14>MUST NOT</bcp14> send any Transfer-Encoding or
   <xref target="field.content-length" format="none" sectionFormat="of" derivedContent="">Content-Length</xref> header fields in a
   <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref> response to CONNECT.
   A client <bcp14>MUST</bcp14> ignore any Content-Length or Transfer-Encoding header
   fields received in a successful response to CONNECT.

- section-9.3.7-5: 
   A client <bcp14>MAY</bcp14> send a <xref target="field.max-forwards" format="none" sectionFormat="of" derivedContent="">Max-Forwards</xref> header field in an
   OPTIONS request to target a specific recipient in the request chain (see
   <xref target="field.max-forwards" format="default" sectionFormat="of" derivedContent="Section 7.6.2"/>). A proxy <bcp14>MUST NOT</bcp14> generate a
   Max-Forwards header field while forwarding a request unless that request
   was received with a Max-Forwards field.

- section-9.3.8-2: 
   A client <bcp14>MUST NOT</bcp14> generate fields in a TRACE request containing
   sensitive data that might be disclosed by the response. For example, it
   would be foolish for a user agent to send stored user credentials
   (<xref target="authentication" format="default" sectionFormat="of" derivedContent="Section 11"/>) or cookies <xref target="COOKIE" format="default" sectionFormat="of" derivedContent="COOKIE"/> in a TRACE
   request. The final recipient of the request <bcp14>SHOULD</bcp14> exclude any request
   fields that are likely to contain sensitive data when that recipient
   generates the response content.

- section-9.3.8-4: 
   A client <bcp14>MUST NOT</bcp14> send content in a TRACE request.

- section-10.1.1-16: 
   The origin server <bcp14>MUST NOT</bcp14> wait for the content
   before sending the <xref target="status.100" format="none" sectionFormat="of" derivedContent="">100 (Continue)</xref> response.

- section-10.1.3-1: 
   The "Referer" [sic] header field allows the user agent to specify a URI
   reference for the resource from which the <xref target="target.resource" format="none" sectionFormat="of" derivedContent="">target URI</xref> was
   obtained (i.e., the "referrer", though the field name is misspelled).
   A user agent <bcp14>MUST NOT</bcp14> include the fragment and userinfo components
   of the URI reference <xref target="URI" format="default" sectionFormat="of" derivedContent="URI"/>, if any, when generating the
   Referer field value.

- section-10.1.3-9: 
   The Referer header field has the potential to reveal information about the request
   context or browsing history of the user, which is a privacy concern if the
   referring resource's identifier reveals personal information (such as an
   account name) or a resource that is supposed to be confidential (such as
   behind a firewall or internal to a secured service). Most general-purpose
   user agents do not send the Referer header field when the referring
   resource is a local "file" or "data" URI. A user agent <bcp14>SHOULD NOT</bcp14> send a
   <xref target="field.referer" format="none" sectionFormat="of" derivedContent="">Referer</xref> header field if the referring resource was accessed with
   a secure protocol and the request target has an origin differing from that
   of the referring resource, unless the referring resource explicitly allows
   Referer to be sent. A user agent <bcp14>MUST NOT</bcp14> send a
   <xref target="field.referer" format="none" sectionFormat="of" derivedContent="">Referer</xref> header field in an unsecured HTTP request if the
   referring resource was accessed with a secure protocol.
   See <xref target="sensitive.information.in.uris" format="default" sectionFormat="of" derivedContent="Section 17.9"/> for additional
   security considerations.

- section-10.1.5-5: 
   A sender <bcp14>SHOULD</bcp14> limit generated product identifiers to what is necessary
   to identify the product; a sender <bcp14>MUST NOT</bcp14> generate advertising or other
   nonessential information within the product identifier.
   A sender <bcp14>SHOULD NOT</bcp14> generate information in <xref target="field.user-agent" format="none" sectionFormat="of" derivedContent="">product-version</xref>
   that is not a version identifier (i.e., successive versions of the same
   product name ought to differ only in the product-version portion of the
   product identifier).

- section-10.2.1-6: 
   A proxy <bcp14>MUST NOT</bcp14> modify the Allow header field -- it does not need
   to understand all of the indicated methods in order to handle them
   according to the generic message handling rules.

- section-11.6.1-4: 
   A proxy forwarding a response <bcp14>MUST NOT</bcp14> modify any
   <xref target="field.www-authenticate" format="none" sectionFormat="of" derivedContent="">WWW-Authenticate</xref> header fields in that response.

- section-11.6.2-4: 
   A proxy forwarding a request <bcp14>MUST NOT</bcp14> modify any
   <xref target="field.authorization" format="none" sectionFormat="of" derivedContent="">Authorization</xref> header fields in that request.
   See <xref target="CACHING" section="3.5" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-3.5" derivedContent="CACHING"/> for details of and requirements
   pertaining to handling of the Authorization header field by HTTP caches.

- section-12.4.2-4: 
   A sender of qvalue <bcp14>MUST NOT</bcp14> generate more than three digits after the
   decimal point. User configuration of these values ought to be limited in
   the same fashion.

- section-12.5.3-15: 
   Servers that fail a request due to an unsupported content coding ought to
   respond with a <xref target="status.415" format="none" sectionFormat="of" derivedContent="">415 (Unsupported Media Type)</xref> status and
   include an Accept-Encoding header field in that response, allowing
   clients to distinguish between issues related to content codings and media
   types. In order to avoid confusion with issues related to media types,
   servers that fail a request with a 415 status for reasons unrelated to
   content codings <bcp14>MUST NOT</bcp14> include the Accept-Encoding header
   field.

- section-12.5.4-9: 
   Since intelligibility is highly dependent on the individual user, user
   agents need to allow user control over the linguistic preference (either
   through configuration of the user agent itself or by defaulting to a user
   controllable system setting).
   A user agent that does not provide such control to the user <bcp14>MUST NOT</bcp14>
   send an Accept-Language header field.

- section-12.5.5-4: 
   A list containing the member "*" signals that other aspects of the
   request might have played a role in selecting the response representation,
   possibly including aspects outside the message syntax (e.g., the
   client's network address).
   A recipient will not be able to determine whether this response is
   appropriate for a later request without forwarding the request to the
   origin server. A proxy <bcp14>MUST NOT</bcp14> generate "*" in a Vary field value.

- section-12.5.5-9.1.1: 
       To inform cache recipients that they <bcp14>MUST NOT</bcp14> use this response
       to satisfy a later request unless the later request has the
       same values for the listed header fields as the original request
       (<xref target="CACHING" section="4.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.1" derivedContent="CACHING"/>) or reuse of the
       response has been validated by the origin server.
       In other words, Vary expands the cache key
       required to match a new request to the stored cache entry.
              
- section-13.1.1-10: 
   An origin server that evaluates an If-Match condition <bcp14>MUST NOT</bcp14> perform
   the requested method if the condition evaluates to false. Instead,
   the origin server <bcp14>MAY</bcp14>
   indicate that the conditional request failed by responding with a
   <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref> status code. Alternatively,
   if the request is a state-changing operation that appears to have already
   been applied to the selected representation, the origin server <bcp14>MAY</bcp14> respond
   with a <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref> status code
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of it, perhaps because the prior response
   was lost or an equivalent change was made by some other user agent).

- section-13.1.2-11: 
   An origin server that evaluates an If-None-Match condition <bcp14>MUST NOT</bcp14>
   perform the requested method if the condition evaluates to false; instead,
   the origin server <bcp14>MUST</bcp14> respond with either
   a) the <xref target="status.304" format="none" sectionFormat="of" derivedContent="">304 (Not Modified)</xref> status code if the request method
   is GET or HEAD or b) the <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref> status
   code for all other request methods.

- section-13.1.4-13: 
   An origin server that evaluates an If-Unmodified-Since condition <bcp14>MUST NOT</bcp14>
   perform the requested method if the condition evaluates to false.
   Instead, the origin server <bcp14>MAY</bcp14> indicate that the conditional request
   failed by responding with a <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref>
   status code. Alternatively, if the request is a state-changing operation
   that appears to have already been applied to the selected representation,
   the origin server <bcp14>MAY</bcp14> respond with a <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref>
   status code
   (i.e., the change requested by the user agent has already succeeded, but
   the user agent might not be aware of it, perhaps because the prior response
   was lost or an equivalent change was made by some other user agent).

- section-13.1.5-6: 
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   A server <bcp14>MUST</bcp14> ignore an If-Range header field received in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   An origin server <bcp14>MUST</bcp14> ignore an If-Range header field received in a
   request for a target resource that does not support Range requests.

- section-13.1.5-7: 
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   entity tag that is marked as weak.
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   <xref target="http.date" format="none" sectionFormat="of" derivedContent="">HTTP-date</xref> unless the client has no entity tag for
   the corresponding representation and the date is a strong validator
   in the sense defined by <xref target="lastmod.comparison" format="default" sectionFormat="of" derivedContent="Section 8.8.2.2"/>.

- section-13.1.5-7: 
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   entity tag that is marked as weak.
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field containing an
   <xref target="http.date" format="none" sectionFormat="of" derivedContent="">HTTP-date</xref> unless the client has no entity tag for
   the corresponding representation and the date is a strong validator
   in the sense defined by <xref target="lastmod.comparison" format="default" sectionFormat="of" derivedContent="Section 8.8.2.2"/>.

- section-13.2.1-2: 
   A server that is not the origin server for the target resource and cannot
   act as a cache for requests on the target resource <bcp14>MUST NOT</bcp14> evaluate the
   conditional request header fields defined by this specification, and it
   <bcp14>MUST</bcp14> forward them if the request is forwarded, since the generating
   client intends that they be evaluated by a server that can provide a
   current representation.
   Likewise, a server <bcp14>MUST</bcp14> ignore the conditional request header fields
   defined by this specification when received with a request method that does
   not involve the selection or modification of a
   <xref target="selected.representation" format="none" sectionFormat="of" derivedContent="">selected representation</xref>, such as CONNECT, OPTIONS, or TRACE.

- section-14.3-7: 
   Conversely, a client <bcp14>MUST NOT</bcp14> assume that receiving an Accept-Ranges field
   means that future range requests will return partial responses. The content might
   change, the server might only support range requests at certain times or under
   certain conditions, or a different intermediary might process the next request.

- section-14.4-3: 
   If a <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> response contains a
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field with a <xref target="range.units" format="none" sectionFormat="of" derivedContent="">range unit</xref>
   (<xref target="range.units" format="default" sectionFormat="of" derivedContent="Section 14.1"/>) that the recipient does not understand, the
   recipient <bcp14>MUST NOT</bcp14> attempt to recombine it with a stored representation.
   A proxy that receives such a message <bcp14>SHOULD</bcp14> forward it downstream.

- section-14.4-10: 
   A Content-Range field value is invalid if it contains a
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">range-resp</xref> that has a <xref target="rule.int-range" format="none" sectionFormat="of" derivedContent="">last-pos</xref>
   value less than its <xref target="rule.int-range" format="none" sectionFormat="of" derivedContent="">first-pos</xref> value, or a
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">complete-length</xref> value less than or equal to its
   <xref target="rule.int-range" format="none" sectionFormat="of" derivedContent="">last-pos</xref> value. The recipient of an invalid
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref>
          <bcp14>MUST NOT</bcp14> attempt to recombine the received
   content with a stored representation.

- section-15.2-1: 
   The 1xx (Informational) class of status code indicates an
   interim response for communicating connection status or request progress
   prior to completing the requested action and sending a final response.
   Since HTTP/1.0 did not define any 1xx status codes, a server <bcp14>MUST NOT</bcp14> send
   a 1xx response to an HTTP/1.0 client.

- section-15.3.6-3: 
   Since the 205 status code implies that no additional content will be
   provided, a server <bcp14>MUST NOT</bcp14> generate content in a 205 response.

- section-15.3.7.2-1: 
   If multiple parts are being transferred, the server generating the 206
   response <bcp14>MUST</bcp14> generate "multipart/byteranges" content, as defined
   in <xref target="multipart.byteranges" format="default" sectionFormat="of" derivedContent="Section 14.6"/>, and a
   <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> header field containing the
   "multipart/byteranges" media type and its required boundary parameter.
   To avoid confusion with single-part responses, a server <bcp14>MUST NOT</bcp14> generate
   a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field in the HTTP header section of a
   multiple part response (this field will be sent in each part instead).

- section-15.3.7.2-5: 
   A server <bcp14>MUST NOT</bcp14> generate a multipart response to a request for a single
   range, since a client that does not request multiple parts might not
   support multipart responses. However, a server <bcp14>MAY</bcp14> generate a
   "multipart/byteranges" response with only a single body part if multiple
   ranges were requested and only one range was found to be satisfiable or
   only one range remained after coalescing.
   A client that cannot process a "multipart/byteranges" response <bcp14>MUST NOT</bcp14>
   generate a request that asks for multiple ranges.

- section-15.3.7.2-5: 
   A server <bcp14>MUST NOT</bcp14> generate a multipart response to a request for a single
   range, since a client that does not request multiple parts might not
   support multipart responses. However, a server <bcp14>MAY</bcp14> generate a
   "multipart/byteranges" response with only a single body part if multiple
   ranges were requested and only one range was found to be satisfiable or
   only one range remained after coalescing.
   A client that cannot process a "multipart/byteranges" response <bcp14>MUST NOT</bcp14>
   generate a request that asks for multiple ranges.

- section-15.4.8-1: 
   The 307 (Temporary Redirect) status code indicates that the
   <xref target="target.resource" format="none" sectionFormat="of" derivedContent="">target resource</xref> resides temporarily under a different URI
   and the user agent <bcp14>MUST NOT</bcp14> change the request method if it performs an
   automatic redirection to that URI.
   Since the redirection can change over time, the client ought to continue
   using the original target URI for future requests.

- section-15.5.20-3: 
   A proxy <bcp14>MUST NOT</bcp14> generate a 421 response.

- section-16.4.2-2.2.1: 
      The authentication parameter "realm" is reserved for defining protection
      spaces as described in <xref target="protection.space" format="default" sectionFormat="of" derivedContent="Section 11.5"/>. New schemes
      <bcp14>MUST NOT</bcp14> use it in a way incompatible with that definition.
              
- section-16.6.1-4: 
   Names of content codings <bcp14>MUST NOT</bcp14> overlap with names of transfer codings
   (per the "HTTP Transfer Coding Registry" located at
   <eref target="https://www.iana.org/assignments/http-parameters/" brackets="angle"/>) unless
   the encoding transformation is
   identical (as is the case for the compression codings defined in
   <xref target="content.codings" format="default" sectionFormat="of" derivedContent="Section 8.4.1"/>).

