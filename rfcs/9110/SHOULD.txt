- section-2.3-1: 
   A recipient <bcp14>SHOULD</bcp14> parse a received protocol element defensively, with
   only marginal expectations that the element will conform to its ABNF
   grammar and fit within a reasonable buffer size.

- section-4.2.4-4: 
   Before making use of an "http" or "https" URI reference received from an untrusted
   source, a recipient <bcp14>SHOULD</bcp14> parse for userinfo and treat its presence as
   an error; it is likely being used to obscure the authority for the sake of
   phishing attacks.

- section-4.3.4-6: 
   If the certificate is not valid for the target URI's origin,
   a user agent <bcp14>MUST</bcp14> either obtain confirmation from the user
   before proceeding (see <xref target="user.agent" format="default" sectionFormat="of" derivedContent="Section 3.5"/>) or
   terminate the connection with a bad certificate error. Automated
   clients <bcp14>MUST</bcp14> log the error to an appropriate audit log (if available)
   and <bcp14>SHOULD</bcp14> terminate the connection (with a bad certificate error).
   Automated clients <bcp14>MAY</bcp14> provide a configuration setting that disables
   this check, but <bcp14>MUST</bcp14> provide a setting which enables it.

- section-5.1-6: 
   A proxy <bcp14>MUST</bcp14> forward unrecognized header fields unless the
   field name is listed in the <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field
   (<xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>) or the proxy is specifically
   configured to block, or otherwise transform, such fields.
   Other recipients <bcp14>SHOULD</bcp14> ignore unrecognized header and trailer fields.
   Adhering to these requirements allows HTTP's functionality to be extended
   without updating or removing deployed intermediaries.

- section-5.5-4: 
   Field values are usually constrained to the range of US-ASCII characters
   <xref target="USASCII" format="default" sectionFormat="of" derivedContent="USASCII"/>.
   Fields needing a greater range of characters can use an encoding,
   such as the one defined in <xref target="RFC8187" format="default" sectionFormat="of" derivedContent="RFC8187"/>.
   Historically, HTTP allowed field content with text in the ISO-8859-1
   charset <xref target="ISO-8859-1" format="default" sectionFormat="of" derivedContent="ISO-8859-1"/>, supporting other charsets only
   through use of <xref target="RFC2047" format="default" sectionFormat="of" derivedContent="RFC2047"/> encoding.
   Specifications for newly defined fields <bcp14>SHOULD</bcp14> limit their values to
   visible US-ASCII octets (VCHAR), SP, and HTAB.
   A recipient <bcp14>SHOULD</bcp14> treat other allowed octets in field content
   (i.e., <xref target="fields.values" format="none" sectionFormat="of" derivedContent="">obs-text</xref>) as opaque data.

- section-5.5-4: 
   Field values are usually constrained to the range of US-ASCII characters
   <xref target="USASCII" format="default" sectionFormat="of" derivedContent="USASCII"/>.
   Fields needing a greater range of characters can use an encoding,
   such as the one defined in <xref target="RFC8187" format="default" sectionFormat="of" derivedContent="RFC8187"/>.
   Historically, HTTP allowed field content with text in the ISO-8859-1
   charset <xref target="ISO-8859-1" format="default" sectionFormat="of" derivedContent="ISO-8859-1"/>, supporting other charsets only
   through use of <xref target="RFC2047" format="default" sectionFormat="of" derivedContent="RFC2047"/> encoding.
   Specifications for newly defined fields <bcp14>SHOULD</bcp14> limit their values to
   visible US-ASCII octets (VCHAR), SP, and HTAB.
   A recipient <bcp14>SHOULD</bcp14> treat other allowed octets in field content
   (i.e., <xref target="fields.values" format="none" sectionFormat="of" derivedContent="">obs-text</xref>) as opaque data.

- section-5.6.3-2: 
   The OWS rule is used where zero or more linear whitespace octets might
   appear. For protocol elements where optional whitespace is preferred to
   improve readability, a sender <bcp14>SHOULD</bcp14> generate the optional whitespace
   as a single SP; otherwise, a sender <bcp14>SHOULD NOT</bcp14> generate optional
   whitespace except as needed to overwrite invalid or unwanted protocol
   elements during in-place message filtering.

- section-5.6.3-3: 
   The RWS rule is used when at least one linear whitespace octet is required
   to separate field tokens. A sender <bcp14>SHOULD</bcp14> generate RWS as a single SP.

- section-6.2-5: 
   A client <bcp14>SHOULD</bcp14> send a request version equal to the highest
   version to which the client is conformant and
   whose major version is no higher than the highest version supported
   by the server, if this is known.  A client <bcp14>MUST NOT</bcp14> send a
   version to which it is not conformant.

- section-6.2-7: 
   A server <bcp14>SHOULD</bcp14> send a response version equal to the highest version to
   which the server is conformant that has a major version less than or equal
   to the one received in the request.
   A server <bcp14>MUST NOT</bcp14> send a version to which it is not conformant.
   A server can send a <xref target="status.505" format="none" sectionFormat="of" derivedContent="">505 (HTTP Version Not Supported)</xref>
   response if it wishes, for any reason, to refuse service of the client's
   major protocol version.

- section-6.2-8: 
   A recipient that receives a message with a major version number that it
   implements and a minor version number higher than what it implements
   <bcp14>SHOULD</bcp14> process the message as if it
   were in the highest minor version within that major version to which the
   recipient is conformant. A recipient can assume that a message with a
   higher minor version, when sent to a recipient that has not yet indicated
   support for that higher version, is sufficiently backwards-compatible to be
   safely processed by any implementation of the same major version.

- section-6.6.1-5: 
   A sender that generates a Date header field <bcp14>SHOULD</bcp14> generate its
   field value as the best available approximation of the date and time of
   message generation. In theory, the date ought to represent the moment just
   before generating the message content. In practice, a sender can generate
   the date value at any time during message origination.

- section-6.6.2-4: 
   A sender that intends to generate one or more trailer fields in a message
   <bcp14>SHOULD</bcp14> generate a <xref target="field.trailer" format="none" sectionFormat="of" derivedContent="">Trailer</xref> header field in the header
   section of that message to indicate which fields might be present in the
   trailers.

- section-7.2-4: 
   The target URI's authority information is critical for handling a
   request. A user agent <bcp14>MUST</bcp14> generate a Host header field in a request
   unless it sends that information as an ":authority" pseudo-header field.
   A user agent that sends Host <bcp14>SHOULD</bcp14> send it as the first field in the
   header section of a request.

- section-7.5-3: 
   A client that receives a response while it is still sending the associated
   request <bcp14>SHOULD</bcp14> continue sending that request unless it receives
   an explicit indication to the contrary (see, e.g., <xref target="HTTP11" section="9.5" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-9.5" derivedContent="HTTP/1.1"/> and <xref target="HTTP2" section="6.4" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9113#section-6.4" derivedContent="HTTP/2"/>).

- section-7.6.1-7: 
   Furthermore, intermediaries <bcp14>SHOULD</bcp14> remove or replace fields
   that are known to require removal before forwarding, whether or not they appear as a
   connection-option, after applying those fields' semantics. This includes but is not limited to:

- section-7.6.3-10: 
   An intermediary used as a portal through a network firewall
   <bcp14>SHOULD NOT</bcp14> forward the names and ports of hosts within the firewall
   region unless it is explicitly enabled to do so. If not enabled, such an
   intermediary <bcp14>SHOULD</bcp14> replace each received-by host of any host behind the
   firewall by an appropriate pseudonym for that host.

- section-7.8-4: 
   Although protocol names are registered with a preferred case,
   recipients <bcp14>SHOULD</bcp14> use case-insensitive comparison when matching each
   protocol-name to supported protocols.

- section-8.3-5: 
   A sender that generates a message containing content <bcp14>SHOULD</bcp14>
   generate a Content-Type header field in that message unless the intended
   media type of the enclosed representation is unknown to the sender.
   If a Content-Type header field is not present, the recipient <bcp14>MAY</bcp14> either
   assume a media type of
   "application/octet-stream" (<xref target="RFC2046" sectionFormat="comma" section="4.5.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc2046#section-4.5.1" derivedContent="RFC2046"/>)
   or examine the data to determine its type.

- section-8.4.1.1-1: 
   The "compress" coding is an adaptive Lempel-Ziv-Welch (LZW) coding
   <xref target="Welch" format="default" sectionFormat="of" derivedContent="Welch"/> that is commonly produced by the UNIX file
   compression program "compress".
   A recipient <bcp14>SHOULD</bcp14> consider "x-compress" to be equivalent to "compress".

- section-8.4.1.3-1: 
   The "gzip" coding is an LZ77 coding with a 32-bit Cyclic Redundancy Check
   (CRC) that is commonly
   produced by the gzip file compression program <xref target="RFC1952" format="default" sectionFormat="of" derivedContent="RFC1952"/>.
   A recipient <bcp14>SHOULD</bcp14> consider "x-gzip" to be equivalent to "gzip".

- section-8.6-5: 
   A user agent <bcp14>SHOULD</bcp14> send Content-Length in a request when the method
   defines a meaning for enclosed content and it is not sending
   Transfer-Encoding.
   For example, a user agent normally sends Content-Length in a POST request
   even when the value is 0 (indicating empty content).
   A user agent <bcp14>SHOULD NOT</bcp14> send a
   Content-Length header field when the request message does not contain
   content and the method semantics do not anticipate such data.

- section-8.6-9: 
   Aside from the cases defined above, in the absence of Transfer-Encoding,
   an origin server <bcp14>SHOULD</bcp14> send a Content-Length header field when the
   content size is known prior to sending the complete header section.
   This will allow downstream recipients to measure transfer progress,
   know when a received message is complete, and potentially reuse the
   connection for additional requests.

- section-8.8.1-7: 
   An origin server <bcp14>SHOULD</bcp14> change a weak entity tag whenever it
   considers prior representations to be unacceptable as a substitute for
   the current representation. In other words, a weak entity tag ought to
   change whenever the origin server wants caches to invalidate old
   responses.

- section-8.8.2.1-1: 
   An origin server <bcp14>SHOULD</bcp14> send Last-Modified for any selected
   representation for which a last modification date can be reasonably
   and consistently determined, since its use in conditional requests
   and evaluating cache freshness (<xref target="CACHING" format="default" sectionFormat="of" derivedContent="CACHING"/>) can
   substantially reduce unnecessary transfers and significantly
   improve service availability and scalability.

- section-8.8.2.1-3: 
   An origin server <bcp14>SHOULD</bcp14> obtain the Last-Modified value of the
   representation as close as possible to the time that it generates the
   <xref target="field.date" format="none" sectionFormat="of" derivedContent="">Date</xref> field value for its response. This allows a recipient to
   make an accurate assessment of the representation's modification time,
   especially if the representation changes near the time that the
   response is generated.

- section-8.8.3.1-3: 
   An origin server <bcp14>SHOULD</bcp14> send an ETag for any selected representation
   for which detection of changes can be reasonably and consistently
   determined, since the entity tag's use in conditional requests and
   evaluating cache freshness (<xref target="CACHING" format="default" sectionFormat="of" derivedContent="CACHING"/>) can
   substantially reduce unnecessary transfers and significantly
   improve service availability, scalability, and reliability.

- section-9.1-10: 
   The set of methods allowed by a target resource can be listed in an
   <xref target="field.allow" format="none" sectionFormat="of" derivedContent="">Allow</xref> header field (<xref target="field.allow" format="default" sectionFormat="of" derivedContent="Section 10.2.1"/>).
   However, the set of allowed methods can change dynamically.
   An origin server that receives a request method that is unrecognized or
   not implemented <bcp14>SHOULD</bcp14> respond with the
   <xref target="status.501" format="none" sectionFormat="of" derivedContent="">501 (Not Implemented)</xref> status code.
   An origin server that receives a request method that is recognized and
   implemented, but not allowed for the target resource, <bcp14>SHOULD</bcp14> respond
   with the <xref target="status.405" format="none" sectionFormat="of" derivedContent="">405 (Method Not Allowed)</xref> status code.

- section-9.1-10: 
   The set of methods allowed by a target resource can be listed in an
   <xref target="field.allow" format="none" sectionFormat="of" derivedContent="">Allow</xref> header field (<xref target="field.allow" format="default" sectionFormat="of" derivedContent="Section 10.2.1"/>).
   However, the set of allowed methods can change dynamically.
   An origin server that receives a request method that is unrecognized or
   not implemented <bcp14>SHOULD</bcp14> respond with the
   <xref target="status.501" format="none" sectionFormat="of" derivedContent="">501 (Not Implemented)</xref> status code.
   An origin server that receives a request method that is recognized and
   implemented, but not allowed for the target resource, <bcp14>SHOULD</bcp14> respond
   with the <xref target="status.405" format="none" sectionFormat="of" derivedContent="">405 (Method Not Allowed)</xref> status code.

- section-9.2.1-5: 
   A user agent <bcp14>SHOULD</bcp14> distinguish between safe and unsafe methods when
   presenting potential actions to a user, such that the user can be made
   aware of an unsafe action before it is requested.

- section-9.3.2-2: 
   The server <bcp14>SHOULD</bcp14> send the same header fields in response to a HEAD
   request as it would have sent if the request method had been GET.
   However, a server <bcp14>MAY</bcp14> omit header fields for which a value is determined
   only while generating the content. For example, some servers buffer a
   dynamic response to GET until a minimum amount of data is generated so
   that they can more efficiently delimit small responses or make late
   decisions with regard to content selection. Such a response to GET might
   contain <xref target="field.content-length" format="none" sectionFormat="of" derivedContent="">Content-Length</xref> and <xref target="field.vary" format="none" sectionFormat="of" derivedContent="">Vary</xref> fields, for
   example, that are not generated within a HEAD response. These minor
   inconsistencies are considered preferable to generating and discarding the
   content for a HEAD request, since HEAD is usually requested for the
   sake of efficiency.

- section-9.3.3-4: 
   If one or more resources has been created on the origin server as a result
   of successfully processing a POST request, the origin server <bcp14>SHOULD</bcp14> send
   a <xref target="status.201" format="none" sectionFormat="of" derivedContent="">201 (Created)</xref> response containing a <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref>
   header field that provides an identifier for the primary resource created
   (<xref target="field.location" format="default" sectionFormat="of" derivedContent="Section 10.2.2"/>) and a representation that describes the
   status of the request while referring to the new resource(s).

- section-9.3.4-3: 
   An origin server <bcp14>SHOULD</bcp14> verify that the PUT representation is consistent
   with its configured constraints for the target resource. For example, if
   an origin server determines a resource's representation metadata based on
   the URI, then the origin server needs to ensure that the content received
   in a successful PUT request is consistent with that metadata. When a PUT
   representation is inconsistent with the target resource, the origin
   server <bcp14>SHOULD</bcp14> either make them consistent, by transforming the
   representation or changing the resource configuration, or respond
   with an appropriate error message containing sufficient information
   to explain why the representation is unsuitable.  The
   <xref target="status.409" format="none" sectionFormat="of" derivedContent="">409 (Conflict)</xref> or <xref target="status.415" format="none" sectionFormat="of" derivedContent="">415 (Unsupported Media Type)</xref>
   status codes are suggested, with the latter being specific to constraints on
   <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> values.

- section-9.3.4-3: 
   An origin server <bcp14>SHOULD</bcp14> verify that the PUT representation is consistent
   with its configured constraints for the target resource. For example, if
   an origin server determines a resource's representation metadata based on
   the URI, then the origin server needs to ensure that the content received
   in a successful PUT request is consistent with that metadata. When a PUT
   representation is inconsistent with the target resource, the origin
   server <bcp14>SHOULD</bcp14> either make them consistent, by transforming the
   representation or changing the resource configuration, or respond
   with an appropriate error message containing sufficient information
   to explain why the representation is unsuitable.  The
   <xref target="status.409" format="none" sectionFormat="of" derivedContent="">409 (Conflict)</xref> or <xref target="status.415" format="none" sectionFormat="of" derivedContent="">415 (Unsupported Media Type)</xref>
   status codes are suggested, with the latter being specific to constraints on
   <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> values.

- section-9.3.4-7: 
   This extends to how header and trailer fields are stored; while common
   header fields like <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> will typically be stored
   and returned upon subsequent GET requests, header and trailer field
   handling is specific to the resource that received the request. As a result,
   an origin server <bcp14>SHOULD</bcp14> ignore unrecognized header and trailer fields
   received in a PUT request (i.e., not save them as part of the resource
   state).

- section-9.3.4-10: 
   Proper interpretation of a PUT request presumes that the user agent knows
   which target resource is desired. A service that selects a proper URI on
   behalf of the client, after receiving a state-changing request, <bcp14>SHOULD</bcp14> be
   implemented using the POST method rather than PUT. If the origin server
   will not make the requested PUT state change to the target resource and
   instead wishes to have it applied to a different resource, such as when the
   resource has been moved to a different URI, then the origin server <bcp14>MUST</bcp14>
   send an appropriate <xref target="status.3xx" format="none" sectionFormat="of" derivedContent="">3xx (Redirection)</xref> response; the
   user agent <bcp14>MAY</bcp14> then make its own decision regarding whether or not to
   redirect the request.

- section-9.3.5-4: 
   If a DELETE method is successfully applied, the origin server <bcp14>SHOULD</bcp14> send

- section-9.3.6-11: 
   There are significant risks in establishing a tunnel to arbitrary servers,
   particularly when the destination is a well-known or reserved TCP port that
   is not intended for Web traffic. For example, a CONNECT to
   "example.com:25" would suggest that the proxy connect to the reserved
   port for SMTP traffic; if allowed, that could trick the proxy into
   relaying spam email. Proxies that support CONNECT <bcp14>SHOULD</bcp14> restrict its
   use to a limited set of known ports or a configurable list of safe
   request targets.

- section-9.3.7-4: 
   A server generating a successful response to OPTIONS <bcp14>SHOULD</bcp14> send any
   header that might indicate optional features implemented by the
   server and applicable to the target resource (e.g., <xref target="field.allow" format="none" sectionFormat="of" derivedContent="">Allow</xref>),
   including potential extensions not defined by this specification.
   The response content, if any, might also describe the communication options
   in a machine or human-readable representation. A standard format for such a
   representation is not defined by this specification, but might be defined by
   future extensions to HTTP.

- section-9.3.8-1: 
   The TRACE method requests a remote, application-level loop-back of the
   request message. The final recipient of the request <bcp14>SHOULD</bcp14> reflect the
   message received, excluding some fields described below, back to the client
   as the content of a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response. The "message/http"
   format (<xref target="HTTP11" section="10.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-10.1" derivedContent="HTTP/1.1"/>) is one way to do so.
   The final recipient is either the origin server or the first server to
   receive a <xref target="field.max-forwards" format="none" sectionFormat="of" derivedContent="">Max-Forwards</xref> value of zero (0) in the request
   (<xref target="field.max-forwards" format="default" sectionFormat="of" derivedContent="Section 7.6.2"/>).

- section-9.3.8-2: 
   A client <bcp14>MUST NOT</bcp14> generate fields in a TRACE request containing
   sensitive data that might be disclosed by the response. For example, it
   would be foolish for a user agent to send stored user credentials
   (<xref target="authentication" format="default" sectionFormat="of" derivedContent="Section 11"/>) or cookies <xref target="COOKIE" format="default" sectionFormat="of" derivedContent="COOKIE"/> in a TRACE
   request. The final recipient of the request <bcp14>SHOULD</bcp14> exclude any request
   fields that are likely to contain sensitive data when that recipient
   generates the response content.

- section-10.1.2-6: 
   A robotic user agent <bcp14>SHOULD</bcp14> send a valid From header field so that the
   person responsible for running the robot can be contacted if problems
   occur on servers, such as if the robot is sending excessive, unwanted,
   or invalid requests.

- section-10.1.5-1: 
   The "User-Agent" header field contains information about the user agent
   originating the request, which is often used by servers to help identify
   the scope of reported interoperability problems, to work around or tailor
   responses to avoid particular user agent limitations, and for analytics
   regarding browser or operating system use. A user agent <bcp14>SHOULD</bcp14> send
   a User-Agent header field in each request unless specifically configured not
   to do so.

- section-10.1.5-5: 
   A sender <bcp14>SHOULD</bcp14> limit generated product identifiers to what is necessary
   to identify the product; a sender <bcp14>MUST NOT</bcp14> generate advertising or other
   nonessential information within the product identifier.
   A sender <bcp14>SHOULD NOT</bcp14> generate information in <xref target="field.user-agent" format="none" sectionFormat="of" derivedContent="">product-version</xref>
   that is not a version identifier (i.e., successive versions of the same
   product name ought to differ only in the product-version portion of the
   product identifier).

- section-10.1.5-8: 
   A user agent <bcp14>SHOULD NOT</bcp14> generate a User-Agent header field containing needlessly
   fine-grained detail and <bcp14>SHOULD</bcp14> limit the addition of subproducts by third
   parties. Overly long and detailed User-Agent field values increase request
   latency and the risk of a user being identified against their wishes
   ("fingerprinting").

- section-10.2.4-6: 
   An origin server <bcp14>SHOULD NOT</bcp14> generate a Server header field containing needlessly
   fine-grained detail and <bcp14>SHOULD</bcp14> limit the addition of subproducts by third
   parties. Overly long and detailed Server field values increase response
   latency and potentially reveal internal implementation details that might
   make it (slightly) easier for attackers to find and exploit known security
   holes.

- section-11.4-3: 
   Upon receipt of a request for a protected resource that omits credentials,
   contains invalid credentials (e.g., a bad password) or partial credentials
   (e.g., when the authentication scheme requires more than one round trip),
   an origin server <bcp14>SHOULD</bcp14> send a <xref target="status.401" format="none" sectionFormat="of" derivedContent="">401 (Unauthorized)</xref> response
   that contains a <xref target="field.www-authenticate" format="none" sectionFormat="of" derivedContent="">WWW-Authenticate</xref> header field with at least
   one (possibly new) challenge applicable to the requested resource.

- section-11.4-4: 
   Likewise, upon receipt of a request that omits proxy credentials or
   contains invalid or partial proxy credentials, a proxy that requires
   authentication <bcp14>SHOULD</bcp14> generate a
   <xref target="status.407" format="none" sectionFormat="of" derivedContent="">407 (Proxy Authentication Required)</xref> response that contains
   a <xref target="field.proxy-authenticate" format="none" sectionFormat="of" derivedContent="">Proxy-Authenticate</xref> header field with at least one
   (possibly new) challenge applicable to the proxy.

- section-12.5.1-6: 
   Previous specifications allowed additional extension parameters to appear
   after the weight parameter. The accept extension grammar (accept-params, accept-ext) has
   been removed because it had a complicated definition, was not being used in
   practice, and is more easily deployed through new header fields. Senders
   using weights <bcp14>SHOULD</bcp14> send "q" last (after all media-range parameters).
   Recipients <bcp14>SHOULD</bcp14> process any parameter named "q" as weight, regardless of
   parameter ordering.

- section-12.5.1-6: 
   Previous specifications allowed additional extension parameters to appear
   after the weight parameter. The accept extension grammar (accept-params, accept-ext) has
   been removed because it had a complicated definition, was not being used in
   practice, and is more easily deployed through new header fields. Senders
   using weights <bcp14>SHOULD</bcp14> send "q" last (after all media-range parameters).
   Recipients <bcp14>SHOULD</bcp14> process any parameter named "q" as weight, regardless of
   parameter ordering.

- section-12.5.3-12: 
   An Accept-Encoding header field with a field value that is empty
   implies that the user agent does not want any content coding in response.
   If a non-empty Accept-Encoding header field is present in a request and none of the
   available representations for the response have a content coding that
   is listed as acceptable, the origin server <bcp14>SHOULD</bcp14> send a response
   without any content coding unless the identity coding is indicated as unacceptable.

- section-12.5.5-10: 
   An origin server <bcp14>SHOULD</bcp14> generate a Vary header field on a cacheable
   response when it wishes that response to be selectively reused for
   subsequent requests. Generally, that is the case when the response
   content has been tailored to better fit the preferences expressed by
   those selecting header fields, such as when an origin server has
   selected the response's language based on the request's
   <xref target="field.accept-language" format="none" sectionFormat="of" derivedContent="">Accept-Language</xref> header field.

- section-13.1.2-6: 
   If-None-Match is primarily used in conditional GET requests to enable
   efficient updates of cached information with a minimum amount of
   transaction overhead. When a client desires to update one or more stored
   responses that have entity tags, the client <bcp14>SHOULD</bcp14> generate an
   If-None-Match header field containing a list of those entity tags when
   making a GET request; this allows recipient servers to send a
   <xref target="status.304" format="none" sectionFormat="of" derivedContent="">304 (Not Modified)</xref> response to indicate when one of those
   stored responses matches the selected representation.

- section-13.1.3-12: 
   When an origin server receives a request that selects a representation
   and that request includes an If-Modified-Since header field without an
   <xref target="field.if-none-match" format="none" sectionFormat="of" derivedContent="">If-None-Match</xref> header field, the origin server <bcp14>SHOULD</bcp14>
   evaluate the If-Modified-Since condition per
   <xref target="evaluation" format="default" sectionFormat="of" derivedContent="Section 13.2"/> prior to performing the method.

- section-13.1.3-15: 
   An origin server that evaluates an If-Modified-Since condition
   <bcp14>SHOULD NOT</bcp14> perform the requested method if the condition evaluates to
   false; instead,
   the origin server <bcp14>SHOULD</bcp14> generate a <xref target="status.304" format="none" sectionFormat="of" derivedContent="">304 (Not Modified)</xref>
   response, including only those metadata that are useful for identifying or
   updating a previously cached response.

- section-13.1.5-13: 
   A recipient of an If-Range header field <bcp14>MUST</bcp14> ignore the
   <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field if the If-Range condition
   evaluates to false. Otherwise, the recipient <bcp14>SHOULD</bcp14> process the
   <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field as requested.

- section-14.2-8: 
   A client that is requesting multiple ranges <bcp14>SHOULD</bcp14> list those ranges in
   ascending order (the order in which they would typically be received in a
   complete representation) unless there is a specific need to request a later
   part earlier. For example, a user agent processing a large representation
   with an internal catalog of parts might need to request later parts first,
   particularly if the representation consists of pages stored in reverse
   order and the user agent wishes to transfer one page at a time.

- section-14.2-11: 
   If all of the preconditions are true, the server supports the Range header
   field for the target resource, the received Range field-value contains a
   valid <xref target="rule.ranges-specifier" format="none" sectionFormat="of" derivedContent="">ranges-specifier</xref> with a <xref target="range.units" format="none" sectionFormat="of" derivedContent="">range-unit</xref>
   supported for that target resource, and that
   <xref target="rule.ranges-specifier" format="none" sectionFormat="of" derivedContent="">ranges-specifier</xref> is <xref target="satisfiable" format="none" sectionFormat="of" derivedContent="">satisfiable</xref> with respect
   to the selected representation,
   the server <bcp14>SHOULD</bcp14> send a <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> response
   with content containing one or more partial representations
   that correspond to the satisfiable <xref target="rule.ranges-specifier" format="none" sectionFormat="of" derivedContent="">range-spec</xref>(s) requested.

- section-14.2-13: 
   If all of the preconditions are true, the server supports the Range header
   field for the target resource, the received Range field-value contains a
   valid <xref target="rule.ranges-specifier" format="none" sectionFormat="of" derivedContent="">ranges-specifier</xref>, and either the
   <xref target="range.units" format="none" sectionFormat="of" derivedContent="">range-unit</xref> is not supported for that target resource or
   the <xref target="rule.ranges-specifier" format="none" sectionFormat="of" derivedContent="">ranges-specifier</xref> is unsatisfiable with respect to
   the selected representation, the server <bcp14>SHOULD</bcp14> send a
   <xref target="status.416" format="none" sectionFormat="of" derivedContent="">416 (Range Not Satisfiable)</xref> response.

- section-14.4-3: 
   If a <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> response contains a
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field with a <xref target="range.units" format="none" sectionFormat="of" derivedContent="">range unit</xref>
   (<xref target="range.units" format="default" sectionFormat="of" derivedContent="Section 14.1"/>) that the recipient does not understand, the
   recipient <bcp14>MUST NOT</bcp14> attempt to recombine it with a stored representation.
   A proxy that receives such a message <bcp14>SHOULD</bcp14> forward it downstream.

- section-14.4-5: 
   For byte ranges, a sender <bcp14>SHOULD</bcp14> indicate the complete length of the
   representation from which the range has been extracted, unless the complete
   length is unknown or difficult to determine. An asterisk character ("*") in
   place of the complete-length indicates that the representation length was
   unknown when the header field was generated.

- section-14.4-11: 
   A server generating a <xref target="status.416" format="none" sectionFormat="of" derivedContent="">416 (Range Not Satisfiable)</xref> response
   to a byte-range request <bcp14>SHOULD</bcp14> send a Content-Range header field with an
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">unsatisfied-range</xref> value, as in the following example:

- section-14.5-2: 
   An origin server <bcp14>SHOULD</bcp14> respond with a <xref target="status.400" format="none" sectionFormat="of" derivedContent="">400 (Bad Request)</xref>
   status code if it receives <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> on a PUT for a
   target resource that does not support partial PUT requests.

- section-15-6: 
   Values outside the range 100..599 are invalid. Implementations often use
   three-digit integer values outside of that range (i.e., 600..999) for
   internal communication of non-HTTP status (e.g., library errors). A client
   that receives a response with an invalid status code <bcp14>SHOULD</bcp14> process the
   response as if it had a <xref target="status.5xx" format="none" sectionFormat="of" derivedContent="">5xx (Server Error)</xref> status code.

- section-15.3.1-5: 
   In 200 responses to GET or HEAD, an origin server <bcp14>SHOULD</bcp14> send any
   available validator fields (<xref target="response.validator" format="default" sectionFormat="of" derivedContent="Section 8.8"/>) for the
   <xref target="selected.representation" format="none" sectionFormat="of" derivedContent="">selected representation</xref>, with both a strong entity tag and
   a <xref target="field.last-modified" format="none" sectionFormat="of" derivedContent="">Last-Modified</xref> date being preferred.

- section-15.3.7.2-2: 
   Within the header area of each body part in the multipart content, the
   server <bcp14>MUST</bcp14> generate a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field
   corresponding to the range being enclosed in that body part.
   If the selected representation would have had a <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref>
   header field in a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response, the server <bcp14>SHOULD</bcp14>
   generate that same <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> header field in the header area of
   each body part. For example:

- section-15.3.7.2-6: 
   A server that generates a multipart response <bcp14>SHOULD</bcp14> send
   the parts in the same order that the corresponding range-spec appeared
   in the received <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field, excluding those ranges
   that were deemed unsatisfiable or that were coalesced into other ranges.
   A client that receives a multipart response <bcp14>MUST</bcp14> inspect the
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field present in each body part in
   order to determine which range is contained in that body part; a client
   cannot rely on receiving the same ranges that it requested, nor the same
   order that it requested.

- section-15.4-5: 
   When automatically following a redirected request, the user agent <bcp14>SHOULD</bcp14>
   resend the original request message with the following modifications:

- section-15.4-7: 
   A client <bcp14>SHOULD</bcp14> detect and intervene in cyclical redirections (i.e.,
   "infinite" redirection loops).

- section-15.4.1-2: 
   If the server has a preferred choice, the server <bcp14>SHOULD</bcp14> generate a
   <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref> header field containing a preferred choice's URI
   reference. The user agent <bcp14>MAY</bcp14> use the Location field value for automatic
   redirection.

- section-15.4.1-3: 
   For request methods other than HEAD, the server <bcp14>SHOULD</bcp14> generate content
   in the 300 response containing a list of representation metadata and URI
   reference(s) from which the user or user agent can choose the one most
   preferred. The user agent <bcp14>MAY</bcp14> make a selection from that list
   automatically if it understands the provided media type. A specific format
   for automatic selection is not defined by this specification because HTTP
   tries to remain orthogonal to the definition of its content.
   In practice, the representation is provided in some easily parsed format
   believed to be acceptable to the user agent, as determined by shared design
   or content negotiation, or in some commonly accepted hypertext format.

- section-15.4.2-2: 
   The server <bcp14>SHOULD</bcp14> generate a <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref> header field in the
   response containing a preferred URI reference for the new permanent URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response content usually contains a short hypertext note with
   a hyperlink to the new URI(s).

- section-15.4.3-2: 
   The server <bcp14>SHOULD</bcp14> generate a <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref> header field in the
   response containing a URI reference for the different URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response content usually contains a short hypertext note with
   a hyperlink to the different URI(s).

- section-15.4.5-5: 
   Requirements on a cache that receives a 304 response are defined in
   <xref target="CACHING" section="4.3.4" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.3.4" derivedContent="CACHING"/>. If the conditional request originated with an
   outbound client, such as a user agent with its own cache sending a
   conditional GET to a shared proxy, then the proxy <bcp14>SHOULD</bcp14> forward the
   304 response to that client.

- section-15.4.8-2: 
   The server <bcp14>SHOULD</bcp14> generate a <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref> header field in the
   response containing a URI reference for the different URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response content usually contains a short hypertext note with
   a hyperlink to the different URI(s).

- section-15.4.9-2: 
   The server <bcp14>SHOULD</bcp14> generate a <xref target="field.location" format="none" sectionFormat="of" derivedContent="">Location</xref> header field in the
   response containing a preferred URI reference for the new permanent URI.
   The user agent <bcp14>MAY</bcp14> use the Location field value for automatic redirection.
   The server's response content usually contains a short hypertext note with
   a hyperlink to the new URI(s).

- section-15.5-1: 
   The 4xx (Client Error) class of status code indicates that
   the client seems to have erred. Except when responding to a HEAD request,
   the server <bcp14>SHOULD</bcp14> send a representation containing an explanation of
   the error situation, and whether it is a temporary or permanent condition.
   These status codes are applicable to any request method. User agents
   <bcp14>SHOULD</bcp14> display any included representation to the user.

- section-15.5-1: 
   The 4xx (Client Error) class of status code indicates that
   the client seems to have erred. Except when responding to a HEAD request,
   the server <bcp14>SHOULD</bcp14> send a representation containing an explanation of
   the error situation, and whether it is a temporary or permanent condition.
   These status codes are applicable to any request method. User agents
   <bcp14>SHOULD</bcp14> display any included representation to the user.

- section-15.5.2-2: 
   If the request included authentication credentials, then the 401 response
   indicates that authorization has been refused for those credentials.
   The user agent <bcp14>MAY</bcp14> repeat the request with a new or replaced
   <xref target="field.authorization" format="none" sectionFormat="of" derivedContent="">Authorization</xref> header field (<xref target="field.authorization" format="default" sectionFormat="of" derivedContent="Section 11.6.2"/>).
   If the 401 response contains the same challenge as the prior response, and
   the user agent has already attempted authentication at least once, then the
   user agent <bcp14>SHOULD</bcp14> present the enclosed representation to the user, since
   it usually contains relevant diagnostic information.

- section-15.5.7-2: 
   The server <bcp14>SHOULD</bcp14> generate content containing a list of available
   representation characteristics and corresponding resource identifiers from
   which the user or user agent can choose the one most appropriate.
   A user agent <bcp14>MAY</bcp14> automatically select the most appropriate choice from
   that list. However, this specification does not define any standard for
   such automatic selection, as described in <xref target="status.300" format="default" sectionFormat="of" derivedContent="Section 15.4.1"/>.

- section-15.5.10-1: 
   The 409 (Conflict) status code indicates that the request
   could not be completed due to a conflict with the current state of the target
   resource. This code is used in situations where the user might be able to
   resolve the conflict and resubmit the request. The server <bcp14>SHOULD</bcp14> generate
   content that includes enough information for a user to recognize the
   source of the conflict.

- section-15.5.14-2: 
   If the condition is temporary, the server <bcp14>SHOULD</bcp14> generate a
   <xref target="field.retry-after" format="none" sectionFormat="of" derivedContent="">Retry-After</xref> header field to indicate that it is temporary
   and after what time the client <bcp14>MAY</bcp14> try again.

- section-15.5.17-3: 
   A server that generates a 416 response to a byte-range request <bcp14>SHOULD</bcp14>
   generate a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field
   specifying the current length of the selected representation
   (<xref target="field.content-range" format="default" sectionFormat="of" derivedContent="Section 14.4"/>).

- section-15.6-1: 
   The 5xx (Server Error) class of status code indicates that
   the server is aware that it has erred or is incapable of performing the
   requested method.
   Except when responding to a HEAD request, the server <bcp14>SHOULD</bcp14> send a
   representation containing an explanation of the error situation, and
   whether it is a temporary or permanent condition.
   A user agent <bcp14>SHOULD</bcp14> display any included representation to the user.
   These status codes are applicable to any request method.

- section-15.6-1: 
   The 5xx (Server Error) class of status code indicates that
   the server is aware that it has erred or is incapable of performing the
   requested method.
   Except when responding to a HEAD request, the server <bcp14>SHOULD</bcp14> send a
   representation containing an explanation of the error situation, and
   whether it is a temporary or permanent condition.
   A user agent <bcp14>SHOULD</bcp14> display any included representation to the user.
   These status codes are applicable to any request method.

- section-15.6.6-1: 
   The 505 (HTTP Version Not Supported) status code indicates
   that the server does not support, or refuses to support, the major version
   of HTTP that was used in the request message. The server is indicating that
   it is unable or unwilling to complete the request using the same major
   version as the client, as described in <xref target="protocol.version" format="default" sectionFormat="of" derivedContent="Section 2.5"/>, other than with this
   error message. The server <bcp14>SHOULD</bcp14> generate a representation for the 505
   response that describes why that version is not supported and what other
   protocols are supported by that server.

- section-16.3.2.1-3: 
   While the field-name syntax is defined to allow any token character, in
   practice some implementations place limits on the characters they accept
   in field-names. To be interoperable, new field names <bcp14>SHOULD</bcp14> constrain
   themselves to alphanumeric characters, "-", and ".", and <bcp14>SHOULD</bcp14>
   begin with a letter. For example, the underscore
   ("_") character can be problematic when passed through non-HTTP
   gateway interfaces (see <xref target="underscore.in.fields" format="default" sectionFormat="of" derivedContent="Section 17.10"/>).

- section-16.3.2.1-3: 
   While the field-name syntax is defined to allow any token character, in
   practice some implementations place limits on the characters they accept
   in field-names. To be interoperable, new field names <bcp14>SHOULD</bcp14> constrain
   themselves to alphanumeric characters, "-", and ".", and <bcp14>SHOULD</bcp14>
   begin with a letter. For example, the underscore
   ("_") character can be problematic when passed through non-HTTP
   gateway interfaces (see <xref target="underscore.in.fields" format="default" sectionFormat="of" derivedContent="Section 17.10"/>).

