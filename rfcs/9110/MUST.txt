- section-2.3-3: 
   At a minimum, a recipient <bcp14>MUST</bcp14> be able to parse and process protocol
   element lengths that are at least as long as the values that it generates
   for those same protocol elements in other messages. For example, an origin
   server that publishes very long URI references to its own resources needs
   to be able to parse and process those same references when received as a
   target URI.

- section-2.4-1: 
   A recipient <bcp14>MUST</bcp14> interpret a received protocol element according to the
   semantics defined for it by this specification, including extensions to
   this specification, unless the recipient has determined (through experience
   or configuration) that the sender incorrectly implements what is implied by
   those semantics.
   For example, an origin server might disregard the contents of a received
   <xref target="field.accept-encoding" format="none" sectionFormat="of" derivedContent="">Accept-Encoding</xref> header field if inspection of the
   <xref target="field.user-agent" format="none" sectionFormat="of" derivedContent="">User-Agent</xref> header field indicates a specific implementation
   version that is known to fail on receipt of certain content codings.

- section-4.2.1-4: 
   A sender <bcp14>MUST NOT</bcp14> generate an "http" URI with an empty host identifier.
   A recipient that processes such a URI reference <bcp14>MUST</bcp14> reject it as invalid.

- section-4.2.2-4: 
   A sender <bcp14>MUST NOT</bcp14> generate an "https" URI with an empty host identifier.
   A recipient that processes such a URI reference <bcp14>MUST</bcp14> reject it as invalid.

- section-4.2.2-6: 
   A client <bcp14>MUST</bcp14> ensure that its HTTP requests for an "https" resource are
   secured, prior to being communicated, and that it only accepts secured
   responses to those requests. Note that the definition of what cryptographic
   mechanisms are acceptable to client and server are usually negotiated and
   can change over time.

- section-4.3.4-1: 
   To establish a <xref target="https.uri" format="none" sectionFormat="of" derivedContent="">secured</xref> connection to dereference a URI,
   a client <bcp14>MUST</bcp14> verify that the service's identity is an acceptable
   match for the URI's origin server. Certificate verification is used to
   prevent server impersonation by an on-path attacker or by an attacker
   that controls name resolution. This process requires that a client be
   configured with a set of trust anchors.

- section-4.3.4-2: 
   In general, a client <bcp14>MUST</bcp14> verify the service identity using the
   verification process defined in
   <xref target="RFC6125" section="6" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc6125#section-6" derivedContent="RFC6125"/>. The client <bcp14>MUST</bcp14> construct
   a reference identity from the service's host: if the host is a literal IP address
   (<xref target="https.ip-id" format="default" sectionFormat="of" derivedContent="Section 4.3.5"/>), the reference identity is an IP-ID, otherwise
   the host is a name and the reference identity is a DNS-ID.

- section-4.3.4-2: 
   In general, a client <bcp14>MUST</bcp14> verify the service identity using the
   verification process defined in
   <xref target="RFC6125" section="6" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc6125#section-6" derivedContent="RFC6125"/>. The client <bcp14>MUST</bcp14> construct
   a reference identity from the service's host: if the host is a literal IP address
   (<xref target="https.ip-id" format="default" sectionFormat="of" derivedContent="Section 4.3.5"/>), the reference identity is an IP-ID, otherwise
   the host is a name and the reference identity is a DNS-ID.

- section-4.3.4-6: 
   If the certificate is not valid for the target URI's origin,
   a user agent <bcp14>MUST</bcp14> either obtain confirmation from the user
   before proceeding (see <xref target="user.agent" format="default" sectionFormat="of" derivedContent="Section 3.5"/>) or
   terminate the connection with a bad certificate error. Automated
   clients <bcp14>MUST</bcp14> log the error to an appropriate audit log (if available)
   and <bcp14>SHOULD</bcp14> terminate the connection (with a bad certificate error).
   Automated clients <bcp14>MAY</bcp14> provide a configuration setting that disables
   this check, but <bcp14>MUST</bcp14> provide a setting which enables it.

- section-4.3.4-6: 
   If the certificate is not valid for the target URI's origin,
   a user agent <bcp14>MUST</bcp14> either obtain confirmation from the user
   before proceeding (see <xref target="user.agent" format="default" sectionFormat="of" derivedContent="Section 3.5"/>) or
   terminate the connection with a bad certificate error. Automated
   clients <bcp14>MUST</bcp14> log the error to an appropriate audit log (if available)
   and <bcp14>SHOULD</bcp14> terminate the connection (with a bad certificate error).
   Automated clients <bcp14>MAY</bcp14> provide a configuration setting that disables
   this check, but <bcp14>MUST</bcp14> provide a setting which enables it.

- section-4.3.4-6: 
   If the certificate is not valid for the target URI's origin,
   a user agent <bcp14>MUST</bcp14> either obtain confirmation from the user
   before proceeding (see <xref target="user.agent" format="default" sectionFormat="of" derivedContent="Section 3.5"/>) or
   terminate the connection with a bad certificate error. Automated
   clients <bcp14>MUST</bcp14> log the error to an appropriate audit log (if available)
   and <bcp14>SHOULD</bcp14> terminate the connection (with a bad certificate error).
   Automated clients <bcp14>MAY</bcp14> provide a configuration setting that disables
   this check, but <bcp14>MUST</bcp14> provide a setting which enables it.

- section-5.1-6: 
   A proxy <bcp14>MUST</bcp14> forward unrecognized header fields unless the
   field name is listed in the <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field
   (<xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>) or the proxy is specifically
   configured to block, or otherwise transform, such fields.
   Other recipients <bcp14>SHOULD</bcp14> ignore unrecognized header and trailer fields.
   Adhering to these requirements allows HTTP's functionality to be extended
   without updating or removing deployed intermediaries.

- section-5.4-2: 
   A server that receives a request header field line, field value, or set of
   fields larger than it wishes to process <bcp14>MUST</bcp14> respond with an appropriate
   <xref target="status.4xx" format="none" sectionFormat="of" derivedContent="">4xx (Client Error)</xref> status code. Ignoring such header fields
   would increase the server's vulnerability to request smuggling attacks
   (<xref target="HTTP11" section="11.2" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9112#section-11.2" derivedContent="HTTP/1.1"/>).

- section-5.5-3: 
   A field value does not include leading or trailing whitespace. When a
   specific version of HTTP allows such whitespace to appear in a message,
   a field parsing implementation <bcp14>MUST</bcp14> exclude such whitespace prior to
   evaluating the field value.

- section-5.5-5: 
   Field values containing CR, LF, or NUL characters are invalid and dangerous,
   due to the varying ways that implementations might parse and interpret
   those characters; a recipient of CR, LF, or NUL within a field value <bcp14>MUST</bcp14>
   either reject the message or replace each of those characters with SP
   before further processing or forwarding of that message. Field values
   containing other CTL characters are also invalid; however,
   recipients <bcp14>MAY</bcp14> retain such characters for the sake of robustness when
   they appear within a safe context (e.g., an application-specific quoted
   string that will not be processed by any downstream HTTP parser).

- section-5.6.1.2-1: 
   Empty elements do not contribute to the count of elements present.
   A recipient <bcp14>MUST</bcp14> parse and ignore
   a reasonable number of empty list elements: enough to handle common mistakes
   by senders that merge values, but not so much that they could be used as a
   denial-of-service mechanism. In other words, a recipient <bcp14>MUST</bcp14> accept lists
   that satisfy the following syntax:

- section-5.6.1.2-1: 
   Empty elements do not contribute to the count of elements present.
   A recipient <bcp14>MUST</bcp14> parse and ignore
   a reasonable number of empty list elements: enough to handle common mistakes
   by senders that merge values, but not so much that they could be used as a
   denial-of-service mechanism. In other words, a recipient <bcp14>MUST</bcp14> accept lists
   that satisfy the following syntax:

- section-5.6.3-5: 
   The BWS rule is used where the grammar allows optional whitespace only for
   historical reasons. A sender <bcp14>MUST NOT</bcp14> generate BWS in messages.
   A recipient <bcp14>MUST</bcp14> parse for such bad whitespace and remove it before
   interpreting the protocol element.

- section-5.6.4-3: 
  
   The backslash octet ("\") can be used as a single-octet
   quoting mechanism within quoted-string and comment constructs.
   Recipients that process the value of a quoted-string <bcp14>MUST</bcp14> handle a
   quoted-pair as if it were replaced by the octet following the backslash.

- section-5.6.7-7: 
   A recipient that parses a timestamp value in an HTTP field <bcp14>MUST</bcp14>
   accept all three HTTP-date formats. When a sender generates a field
   that contains one or more timestamps defined as HTTP-date,
   the sender <bcp14>MUST</bcp14> generate those timestamps in the IMF-fixdate format.

- section-5.6.7-7: 
   A recipient that parses a timestamp value in an HTTP field <bcp14>MUST</bcp14>
   accept all three HTTP-date formats. When a sender generates a field
   that contains one or more timestamps defined as HTTP-date,
   the sender <bcp14>MUST</bcp14> generate those timestamps in the IMF-fixdate format.

- section-5.6.7-18: 
   Recipients of a timestamp value in rfc850-date format, which uses a
   two-digit year, <bcp14>MUST</bcp14> interpret a timestamp that appears to be more
   than 50 years in the future as representing the most recent year in the
   past that had the same last two digits.

- section-6-6: 
   Messages are intended to be "self-descriptive":
   everything a recipient needs to know about the message can be determined by
   looking at the message itself, after decoding or reconstituting parts that
   have been compressed or elided in transit, without requiring an
   understanding of the sender's current application state (established via
   prior messages). However, a client <bcp14>MUST</bcp14> retain knowledge of the request when
   parsing, interpreting, or caching a corresponding response. For example,
   responses to the <xref target="HEAD" format="none" sectionFormat="of" derivedContent="">HEAD</xref> method look just like the beginning of a
   response to <xref target="GET" format="none" sectionFormat="of" derivedContent="">GET</xref> but cannot be parsed in the same manner.

- section-6.5.2-2: 
   Like header fields, trailer fields with the same name are processed in the
   order received; multiple trailer field lines with the same name have the
   equivalent semantics as appending the multiple values as a list of members.
   Trailer fields that might be generated more than once during a message
   <bcp14>MUST</bcp14> be defined as a list-based field even if each member value is only
   processed once per field line received.

- section-6.6.1-6: 
   An origin server with a clock (as defined in
   <xref target="http.date" format="default" sectionFormat="of" derivedContent="Section 5.6.7"/>) <bcp14>MUST</bcp14> generate a Date header field in
   all <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref>, <xref target="status.3xx" format="none" sectionFormat="of" derivedContent="">3xx (Redirection)</xref>,
   and <xref target="status.4xx" format="none" sectionFormat="of" derivedContent="">4xx (Client Error)</xref> responses,
   and <bcp14>MAY</bcp14> generate a Date header field in
   <xref target="status.1xx" format="none" sectionFormat="of" derivedContent="">1xx (Informational)</xref> and
   <xref target="status.5xx" format="none" sectionFormat="of" derivedContent="">5xx (Server Error)</xref> responses.

- section-6.6.1-8: 
   A recipient with a clock that receives a response message without a Date
   header field <bcp14>MUST</bcp14> record the time it was received and append a
   corresponding Date header field to the message's header section if it is
   cached or forwarded downstream.

- section-7.2-4: 
   The target URI's authority information is critical for handling a
   request. A user agent <bcp14>MUST</bcp14> generate a Host header field in a request
   unless it sends that information as an ":authority" pseudo-header field.
   A user agent that sends Host <bcp14>SHOULD</bcp14> send it as the first field in the
   header section of a request.

- section-7.4-3: 
   Unless the connection is from a trusted gateway,
   an origin server <bcp14>MUST</bcp14> reject a request if any scheme-specific requirements
   for the target URI are not met. In particular,
   a request for an "https" resource <bcp14>MUST</bcp14> be rejected unless it has been
   received over a connection that has been secured via a certificate
   valid for that target URI's origin, as defined by <xref target="https.uri" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>.

- section-7.4-3: 
   Unless the connection is from a trusted gateway,
   an origin server <bcp14>MUST</bcp14> reject a request if any scheme-specific requirements
   for the target URI are not met. In particular,
   a request for an "https" resource <bcp14>MUST</bcp14> be rejected unless it has been
   received over a connection that has been secured via a certificate
   valid for that target URI's origin, as defined by <xref target="https.uri" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>.

- section-7.6-3: 
   An intermediary not acting as a tunnel <bcp14>MUST</bcp14> implement the
   <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field, as specified in
   <xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>, and exclude fields from being forwarded
   that are only intended for the incoming connection.

- section-7.6.1-4: 
   When a field aside from Connection is used to supply control
   information for or about the current connection, the sender <bcp14>MUST</bcp14> list
   the corresponding field name within the Connection header field.
   Note that some versions of HTTP prohibit the use of fields for such
   information, and therefore do not allow the Connection field.

- section-7.6.1-5: 
   Intermediaries <bcp14>MUST</bcp14> parse a received Connection
   header field before a message is forwarded and, for each
   connection-option in this field, remove any header or trailer field(s) from
   the message with the same name as the connection-option, and then
   remove the Connection header field itself (or replace it with the
   intermediary's own control options for the forwarded message).

- section-7.6.2-4: 
   Each intermediary that receives a TRACE or OPTIONS request containing a
   Max-Forwards header field <bcp14>MUST</bcp14> check and update its value prior to
   forwarding the request. If the received value is zero (0), the intermediary
   <bcp14>MUST NOT</bcp14> forward the request; instead, the intermediary <bcp14>MUST</bcp14> respond as
   the final recipient. If the received Max-Forwards value is greater than
   zero, the intermediary <bcp14>MUST</bcp14> generate an updated Max-Forwards field in the
   forwarded message with a field value that is the lesser of a) the received
   value decremented by one (1) or b) the recipient's maximum supported value
   for Max-Forwards.

- section-7.6.2-4: 
   Each intermediary that receives a TRACE or OPTIONS request containing a
   Max-Forwards header field <bcp14>MUST</bcp14> check and update its value prior to
   forwarding the request. If the received value is zero (0), the intermediary
   <bcp14>MUST NOT</bcp14> forward the request; instead, the intermediary <bcp14>MUST</bcp14> respond as
   the final recipient. If the received Max-Forwards value is greater than
   zero, the intermediary <bcp14>MUST</bcp14> generate an updated Max-Forwards field in the
   forwarded message with a field value that is the lesser of a) the received
   value decremented by one (1) or b) the recipient's maximum supported value
   for Max-Forwards.

- section-7.6.2-4: 
   Each intermediary that receives a TRACE or OPTIONS request containing a
   Max-Forwards header field <bcp14>MUST</bcp14> check and update its value prior to
   forwarding the request. If the received value is zero (0), the intermediary
   <bcp14>MUST NOT</bcp14> forward the request; instead, the intermediary <bcp14>MUST</bcp14> respond as
   the final recipient. If the received Max-Forwards value is greater than
   zero, the intermediary <bcp14>MUST</bcp14> generate an updated Max-Forwards field in the
   forwarded message with a field value that is the lesser of a) the received
   value decremented by one (1) or b) the recipient's maximum supported value
   for Max-Forwards.

- section-7.6.3-4: 
   A proxy <bcp14>MUST</bcp14> send an appropriate Via header field, as described below, in
   each message that it forwards.
   An HTTP-to-HTTP gateway <bcp14>MUST</bcp14> send an appropriate Via header field in
   each inbound request message and <bcp14>MAY</bcp14> send a Via header field in
   forwarded response messages.

- section-7.6.3-4: 
   A proxy <bcp14>MUST</bcp14> send an appropriate Via header field, as described below, in
   each message that it forwards.
   An HTTP-to-HTTP gateway <bcp14>MUST</bcp14> send an appropriate Via header field in
   each inbound request message and <bcp14>MAY</bcp14> send a Via header field in
   forwarded response messages.

- section-7.8-5: 
   A server that sends a <xref target="status.101" format="none" sectionFormat="of" derivedContent="">101 (Switching Protocols)</xref> response
   <bcp14>MUST</bcp14> send an Upgrade header field to indicate the new protocol(s) to
   which the connection is being switched; if multiple protocol layers are
   being switched, the sender <bcp14>MUST</bcp14> list the protocols in layer-ascending
   order. A server <bcp14>MUST NOT</bcp14> switch to a protocol that was not indicated by
   the client in the corresponding request's Upgrade header field.
   A server <bcp14>MAY</bcp14> choose to ignore the order of preference indicated by the
   client and select the new protocol(s) based on other factors, such as the
   nature of the request or the current load on the server.

- section-7.8-5: 
   A server that sends a <xref target="status.101" format="none" sectionFormat="of" derivedContent="">101 (Switching Protocols)</xref> response
   <bcp14>MUST</bcp14> send an Upgrade header field to indicate the new protocol(s) to
   which the connection is being switched; if multiple protocol layers are
   being switched, the sender <bcp14>MUST</bcp14> list the protocols in layer-ascending
   order. A server <bcp14>MUST NOT</bcp14> switch to a protocol that was not indicated by
   the client in the corresponding request's Upgrade header field.
   A server <bcp14>MAY</bcp14> choose to ignore the order of preference indicated by the
   client and select the new protocol(s) based on other factors, such as the
   nature of the request or the current load on the server.

- section-7.8-6: 
   A server that sends a <xref target="status.426" format="none" sectionFormat="of" derivedContent="">426 (Upgrade Required)</xref> response
   <bcp14>MUST</bcp14> send an Upgrade header field to indicate the acceptable protocols,
   in order of descending preference.

- section-7.8-14: 
   A sender of Upgrade <bcp14>MUST</bcp14> also send an "Upgrade" connection option in the
   <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field (<xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>)
   to inform intermediaries not to forward this field.
   A server that receives an Upgrade header field in an HTTP/1.0 request
   <bcp14>MUST</bcp14> ignore that Upgrade field.

- section-7.8-14: 
   A sender of Upgrade <bcp14>MUST</bcp14> also send an "Upgrade" connection option in the
   <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field (<xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>)
   to inform intermediaries not to forward this field.
   A server that receives an Upgrade header field in an HTTP/1.0 request
   <bcp14>MUST</bcp14> ignore that Upgrade field.

- section-7.8-15: 
   A client cannot begin using an upgraded protocol on the connection until
   it has completely sent the request message (i.e., the client can't change
   the protocol it is sending in the middle of a message).
   If a server receives both an Upgrade and an <xref target="field.expect" format="none" sectionFormat="of" derivedContent="">Expect</xref> header field
   with the "100-continue" expectation (<xref target="field.expect" format="default" sectionFormat="of" derivedContent="Section 10.1.1"/>), the
   server <bcp14>MUST</bcp14> send a <xref target="status.100" format="none" sectionFormat="of" derivedContent="">100 (Continue)</xref> response before sending
   a <xref target="status.101" format="none" sectionFormat="of" derivedContent="">101 (Switching Protocols)</xref> response.

- section-8.3.3-1: 
   MIME provides for a number of "multipart" types -- encapsulations of
   one or more representations within a single message body. All multipart
   types share a common syntax, as defined in <xref target="RFC2046" section="5.1.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc2046#section-5.1.1" derivedContent="RFC2046"/>,
   and include a boundary parameter as part of the media type
   value. The message body is itself a protocol element; a sender <bcp14>MUST</bcp14>
   generate only CRLF to represent line breaks between body parts.

- section-8.4-5: 
   If one or more encodings have been applied to a representation, the sender
   that applied the encodings <bcp14>MUST</bcp14> generate a Content-Encoding header field
   that lists the content codings in the order in which they were applied.
   Note that the coding named "identity" is reserved for its special role
   in <xref target="field.accept-encoding" format="none" sectionFormat="of" derivedContent="">Accept-Encoding</xref> and thus <bcp14>SHOULD NOT</bcp14> be included.

- section-8.6-10: 
   Any Content-Length field value greater than or equal to zero is valid.
   Since there is no predefined limit to the length of content, a
   recipient <bcp14>MUST</bcp14> anticipate potentially large decimal numerals and
   prevent parsing errors due to integer conversion overflows
   or precision loss due to integer conversion
   (<xref target="attack.protocol.element.length" format="default" sectionFormat="of" derivedContent="Section 17.5"/>).

- section-8.7-9: 
   An origin server that receives a Content-Location field in a request
   message <bcp14>MUST</bcp14> treat the information as transitory request context rather
   than as metadata to be saved verbatim as part of the representation.
   An origin server <bcp14>MAY</bcp14> use that context to guide in processing the
   request or to save it for other uses, such as within source links or
   versioning metadata. However, an origin server <bcp14>MUST NOT</bcp14> use such context
   information to alter the request semantics.

- section-8.8.2.1-4: 
   An origin server with a clock (as defined in <xref target="http.date" format="default" sectionFormat="of" derivedContent="Section 5.6.7"/>)
   <bcp14>MUST NOT</bcp14> generate a Last-Modified date that is later than the
   server's time of message origination
   (<xref target="field.date" format="none" sectionFormat="of" derivedContent="">Date</xref>, <xref target="field.date" format="default" sectionFormat="of" derivedContent="Section 6.6.1"/>).
   If the last modification time is derived from implementation-specific
   metadata that evaluates to some time in the future, according to the
   origin server's clock, then the origin server <bcp14>MUST</bcp14> replace that
   value with the message origination date. This prevents a future
   modification date from having an adverse impact on cache validation.

- section-8.8.3-7: 
   An entity tag can be either a weak or strong validator, with
   strong being the default.  If an origin server provides an entity tag
   for a representation and the generation of that entity tag does not satisfy
   all of the characteristics of a strong validator
   (<xref target="weak.and.strong.validators" format="default" sectionFormat="of" derivedContent="Section 8.8.1"/>), then the origin server
   <bcp14>MUST</bcp14> mark the entity tag as weak by prefixing its opaque value
   with "W/" (case-sensitive).

- section-9.1-9: 
   All general-purpose servers <bcp14>MUST</bcp14> support the methods GET and HEAD.
   All other methods are <bcp14>OPTIONAL</bcp14>.

- section-9.2.1-6: 
   When a resource is constructed such that parameters within the target URI
   have the effect of selecting an action, it is the resource
   owner's responsibility to ensure that the action is consistent with the
   request method semantics.
   For example, it is common for Web-based content editing software
   to use actions within query parameters, such as "page?do=delete".
   If the purpose of such a resource is to perform an unsafe action, then
   the resource owner <bcp14>MUST</bcp14> disable or disallow that action when it is
   accessed using a safe request method. Failure to do so will result in
   unfortunate side effects when automated processes perform a GET on
   every URI reference for the sake of link maintenance, pre-fetching,
   building a search index, etc.

- section-9.3.4-2: 
   If the target resource does not have a current representation and
   the PUT successfully creates one, then the origin server <bcp14>MUST</bcp14> inform
   the user agent by sending a <xref target="status.201" format="none" sectionFormat="of" derivedContent="">201 (Created)</xref> response.  If the
   target resource does have a current representation and that representation is
   successfully modified in accordance with the state of the enclosed
   representation, then the origin server <bcp14>MUST</bcp14> send either a
   <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> or a <xref target="status.204" format="none" sectionFormat="of" derivedContent="">204 (No Content)</xref> response to
   indicate successful completion of the request.

- section-9.3.4-2: 
   If the target resource does not have a current representation and
   the PUT successfully creates one, then the origin server <bcp14>MUST</bcp14> inform
   the user agent by sending a <xref target="status.201" format="none" sectionFormat="of" derivedContent="">201 (Created)</xref> response.  If the
   target resource does have a current representation and that representation is
   successfully modified in accordance with the state of the enclosed
   representation, then the origin server <bcp14>MUST</bcp14> send either a
   <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> or a <xref target="status.204" format="none" sectionFormat="of" derivedContent="">204 (No Content)</xref> response to
   indicate successful completion of the request.

- section-9.3.4-10: 
   Proper interpretation of a PUT request presumes that the user agent knows
   which target resource is desired. A service that selects a proper URI on
   behalf of the client, after receiving a state-changing request, <bcp14>SHOULD</bcp14> be
   implemented using the POST method rather than PUT. If the origin server
   will not make the requested PUT state change to the target resource and
   instead wishes to have it applied to a different resource, such as when the
   resource has been moved to a different URI, then the origin server <bcp14>MUST</bcp14>
   send an appropriate <xref target="status.3xx" format="none" sectionFormat="of" derivedContent="">3xx (Redirection)</xref> response; the
   user agent <bcp14>MAY</bcp14> then make its own decision regarding whether or not to
   redirect the request.

- section-9.3.6-2: 
   CONNECT uses a special form of request target, unique to this method,
   consisting of only the host and port number of the tunnel destination,
   separated by a colon. There is no default port; a client <bcp14>MUST</bcp14> send the
   port number even if the CONNECT request is based on a URI reference that
   contains an authority component with an elided port
   (<xref target="uri.references" format="default" sectionFormat="of" derivedContent="Section 4.1"/>). For example,

- section-9.3.6-4: 
   A server <bcp14>MUST</bcp14> reject a CONNECT request that targets an empty or invalid
   port number, typically by responding with a 400 (Bad Request) status code.

- section-9.3.6-8: 
   A tunnel is closed when a tunnel intermediary detects that either side
   has closed its connection: the intermediary <bcp14>MUST</bcp14> attempt to send any
   outstanding data that came from the closed side to the other side, close
   both connections, and then discard any remaining data left undelivered.

- section-9.3.6-12: 
   A server <bcp14>MUST NOT</bcp14> send any Transfer-Encoding or
   <xref target="field.content-length" format="none" sectionFormat="of" derivedContent="">Content-Length</xref> header fields in a
   <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref> response to CONNECT.
   A client <bcp14>MUST</bcp14> ignore any Content-Length or Transfer-Encoding header
   fields received in a successful response to CONNECT.

- section-9.3.7-6: 
   A client that generates an OPTIONS request containing content
   <bcp14>MUST</bcp14> send a valid <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> header field describing
   the representation media type. Note that this specification does not define
   any use for such content.

- section-10.1.1-14: 
   Upon receiving an HTTP/1.1 (or later) request that has a method, target URI,
   and complete header section that contains a 100-continue expectation and
   an indication that request content will follow, an origin server <bcp14>MUST</bcp14>
   send either:

- section-10.1.1-17: 
   Upon receiving an HTTP/1.1 (or later) request that has a method, target URI,
   and complete header section that contains a 100-continue expectation and
   indicates a request content will follow, a proxy <bcp14>MUST</bcp14> either:

- section-10.1.3-7: 
   If the target URI was obtained from a source that does not have its own
   URI (e.g., input from the user keyboard, or an entry within the user's
   bookmarks/favorites), the user agent <bcp14>MUST</bcp14> either exclude the Referer header field
   or send it with a value of "about:blank".

- section-10.1.4-6: 
   A sender of TE <bcp14>MUST</bcp14> also send a "TE" connection option within the
   <xref target="field.connection" format="none" sectionFormat="of" derivedContent="">Connection</xref> header field (<xref target="field.connection" format="default" sectionFormat="of" derivedContent="Section 7.6.1"/>)
   to inform intermediaries not to forward this field.

- section-10.2.1-5: 
   The actual set of allowed methods is defined by the origin server at the
   time of each request. An origin server <bcp14>MUST</bcp14> generate an Allow header field in a
   <xref target="status.405" format="none" sectionFormat="of" derivedContent="">405 (Method Not Allowed)</xref> response and <bcp14>MAY</bcp14> do so in any
   other response. An empty Allow field value indicates that the resource
   allows no methods, which might occur in a 405 response if the resource has
   been temporarily disabled by configuration.

- section-10.2.2-5: 
   If the Location value provided in a <xref target="status.3xx" format="none" sectionFormat="of" derivedContent="">3xx (Redirection)</xref>
   response does not have a fragment component, a user agent <bcp14>MUST</bcp14> process the
   redirection as if the value inherits the fragment component of the URI
   reference used to generate the target URI (i.e., the redirection
   inherits the original reference's fragment, if any).

- section-11.2-4: 
   Authentication parameters are name/value pairs, where the name token is
   matched case-insensitively
   and each parameter name <bcp14>MUST</bcp14> only occur once per challenge.

- section-11.5-5: 
   For historical reasons, a sender <bcp14>MUST</bcp14> only generate the quoted-string syntax.
   Recipients might have to support both token and quoted-string syntax for
   maximum interoperability with existing clients that have been accepting both
   notations for a long time.

- section-11.6.1-3: 
   A server generating a <xref target="status.401" format="none" sectionFormat="of" derivedContent="">401 (Unauthorized)</xref> response
   <bcp14>MUST</bcp14> send a WWW-Authenticate header field containing at least one
   challenge.  A server <bcp14>MAY</bcp14> generate a WWW-Authenticate header field
   in other response messages to indicate that supplying credentials
   (or different credentials) might affect the response.

- section-11.7.1-1: 
   The "Proxy-Authenticate" header field consists of at least one
   challenge that indicates the authentication scheme(s) and parameters
   applicable to the proxy for this request.
   A proxy <bcp14>MUST</bcp14> send at least one Proxy-Authenticate header field in
   each <xref target="status.407" format="none" sectionFormat="of" derivedContent="">407 (Proxy Authentication Required)</xref> response that it
   generates.

- section-13.1.1-2: 
   An origin server <bcp14>MUST</bcp14> use the strong comparison function when comparing
   entity tags for If-Match (<xref target="entity.tag.comparison" format="default" sectionFormat="of" derivedContent="Section 8.8.3.2"/>), since
   the client intends this precondition to prevent the method from being
   applied if there have been any changes to the representation data.

- section-13.1.1-7: 
   When an origin server receives a request that selects a representation
   and that request includes an If-Match header field,
   the origin server <bcp14>MUST</bcp14> evaluate the If-Match condition per
   <xref target="evaluation" format="default" sectionFormat="of" derivedContent="Section 13.2"/> prior to performing the method.

- section-13.1.2-2: 
   A recipient <bcp14>MUST</bcp14> use the weak comparison function when comparing
   entity tags for If-None-Match (<xref target="entity.tag.comparison" format="default" sectionFormat="of" derivedContent="Section 8.8.3.2"/>),
   since weak entity tags can be used for cache validation even if there have
   been changes to the representation data.

- section-13.1.2-8: 
   When an origin server receives a request that selects a representation
   and that request includes an If-None-Match header field,
   the origin server <bcp14>MUST</bcp14> evaluate the If-None-Match condition per
   <xref target="evaluation" format="default" sectionFormat="of" derivedContent="Section 13.2"/> prior to performing the method.

- section-13.1.2-11: 
   An origin server that evaluates an If-None-Match condition <bcp14>MUST NOT</bcp14>
   perform the requested method if the condition evaluates to false; instead,
   the origin server <bcp14>MUST</bcp14> respond with either
   a) the <xref target="status.304" format="none" sectionFormat="of" derivedContent="">304 (Not Modified)</xref> status code if the request method
   is GET or HEAD or b) the <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref> status
   code for all other request methods.

- section-13.1.3-5: 
   A recipient <bcp14>MUST</bcp14> ignore If-Modified-Since if the request contains an
   <xref target="field.if-none-match" format="none" sectionFormat="of" derivedContent="">If-None-Match</xref> header field; the condition in
   <xref target="field.if-none-match" format="none" sectionFormat="of" derivedContent="">If-None-Match</xref> is considered to be a more accurate
   replacement for the condition in If-Modified-Since, and the two are only
   combined for the sake of interoperating with older intermediaries that
   might not implement <xref target="field.if-none-match" format="none" sectionFormat="of" derivedContent="">If-None-Match</xref>.

- section-13.1.3-6: 
   A recipient <bcp14>MUST</bcp14> ignore the If-Modified-Since header field if the
   received field value is not a valid HTTP-date, the field value has more than
   one member, or if the request method is neither GET nor HEAD.

- section-13.1.3-7: 
   A recipient <bcp14>MUST</bcp14> ignore the If-Modified-Since header field if the
   resource does not have a modification date available.

- section-13.1.3-8: 
   A recipient <bcp14>MUST</bcp14> interpret an If-Modified-Since field value's timestamp
   in terms of the origin server's clock.

- section-13.1.4-5: 
   A recipient <bcp14>MUST</bcp14> ignore If-Unmodified-Since if the request contains an
   <xref target="field.if-match" format="none" sectionFormat="of" derivedContent="">If-Match</xref> header field; the condition in
   <xref target="field.if-match" format="none" sectionFormat="of" derivedContent="">If-Match</xref> is considered to be a more accurate replacement for
   the condition in If-Unmodified-Since, and the two are only combined for the
   sake of interoperating with older intermediaries that might not implement
   <xref target="field.if-match" format="none" sectionFormat="of" derivedContent="">If-Match</xref>.

- section-13.1.4-6: 
   A recipient <bcp14>MUST</bcp14> ignore the If-Unmodified-Since header field if the
   received field value is not a valid HTTP-date (including when the field
   value appears to be a list of dates).

- section-13.1.4-7: 
   A recipient <bcp14>MUST</bcp14> ignore the If-Unmodified-Since header field if the
   resource does not have a modification date available.

- section-13.1.4-8: 
   A recipient <bcp14>MUST</bcp14> interpret an If-Unmodified-Since field value's timestamp
   in terms of the origin server's clock.

- section-13.1.4-10: 
   When an origin server receives a request that selects a representation
   and that request includes an If-Unmodified-Since header field without
   an <xref target="field.if-match" format="none" sectionFormat="of" derivedContent="">If-Match</xref> header field,
   the origin server <bcp14>MUST</bcp14> evaluate the If-Unmodified-Since condition per
   <xref target="evaluation" format="default" sectionFormat="of" derivedContent="Section 13.2"/> prior to performing the method.

- section-13.1.5-6: 
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   A server <bcp14>MUST</bcp14> ignore an If-Range header field received in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   An origin server <bcp14>MUST</bcp14> ignore an If-Range header field received in a
   request for a target resource that does not support Range requests.

- section-13.1.5-6: 
   A client <bcp14>MUST NOT</bcp14> generate an If-Range header field in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   A server <bcp14>MUST</bcp14> ignore an If-Range header field received in a request that
   does not contain a <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field.
   An origin server <bcp14>MUST</bcp14> ignore an If-Range header field received in a
   request for a target resource that does not support Range requests.

- section-13.1.5-8: 
   A server that receives an If-Range header field on a Range request <bcp14>MUST</bcp14>
   evaluate the condition per <xref target="evaluation" format="default" sectionFormat="of" derivedContent="Section 13.2"/> prior to
   performing the method.

- section-13.1.5-13: 
   A recipient of an If-Range header field <bcp14>MUST</bcp14> ignore the
   <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field if the If-Range condition
   evaluates to false. Otherwise, the recipient <bcp14>SHOULD</bcp14> process the
   <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field as requested.

- section-13.2.1-1: 
   Except when excluded below, a recipient cache or origin server <bcp14>MUST</bcp14>
   evaluate received request preconditions after it has successfully performed
   its normal request checks and just before it would process the request content
   (if any) or perform the action associated with the request method.
   A server <bcp14>MUST</bcp14> ignore all received preconditions if its response to the
   same request without those conditions, prior to processing the request content,
   would have been a status code other than a <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref>
   or <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref>.
   In other words, redirects and failures that can be detected before
   significant processing occurs take precedence over the evaluation
   of preconditions.

- section-13.2.1-1: 
   Except when excluded below, a recipient cache or origin server <bcp14>MUST</bcp14>
   evaluate received request preconditions after it has successfully performed
   its normal request checks and just before it would process the request content
   (if any) or perform the action associated with the request method.
   A server <bcp14>MUST</bcp14> ignore all received preconditions if its response to the
   same request without those conditions, prior to processing the request content,
   would have been a status code other than a <xref target="status.2xx" format="none" sectionFormat="of" derivedContent="">2xx (Successful)</xref>
   or <xref target="status.412" format="none" sectionFormat="of" derivedContent="">412 (Precondition Failed)</xref>.
   In other words, redirects and failures that can be detected before
   significant processing occurs take precedence over the evaluation
   of preconditions.

- section-13.2.1-2: 
   A server that is not the origin server for the target resource and cannot
   act as a cache for requests on the target resource <bcp14>MUST NOT</bcp14> evaluate the
   conditional request header fields defined by this specification, and it
   <bcp14>MUST</bcp14> forward them if the request is forwarded, since the generating
   client intends that they be evaluated by a server that can provide a
   current representation.
   Likewise, a server <bcp14>MUST</bcp14> ignore the conditional request header fields
   defined by this specification when received with a request method that does
   not involve the selection or modification of a
   <xref target="selected.representation" format="none" sectionFormat="of" derivedContent="">selected representation</xref>, such as CONNECT, OPTIONS, or TRACE.

- section-13.2.1-2: 
   A server that is not the origin server for the target resource and cannot
   act as a cache for requests on the target resource <bcp14>MUST NOT</bcp14> evaluate the
   conditional request header fields defined by this specification, and it
   <bcp14>MUST</bcp14> forward them if the request is forwarded, since the generating
   client intends that they be evaluated by a server that can provide a
   current representation.
   Likewise, a server <bcp14>MUST</bcp14> ignore the conditional request header fields
   defined by this specification when received with a request method that does
   not involve the selection or modification of a
   <xref target="selected.representation" format="none" sectionFormat="of" derivedContent="">selected representation</xref>, such as CONNECT, OPTIONS, or TRACE.

- section-13.2.2-2: 
   A recipient cache or origin server <bcp14>MUST</bcp14> evaluate the request
   preconditions defined by this specification in the following order:

- section-14.1.2-13: 
   In the byte-range syntax, <xref target="rule.int-range" format="none" sectionFormat="of" derivedContent="">first-pos</xref>,
   <xref target="rule.int-range" format="none" sectionFormat="of" derivedContent="">last-pos</xref>, and <xref target="rule.suffix-range" format="none" sectionFormat="of" derivedContent="">suffix-length</xref> are
   expressed as decimal number of octets. Since there is no predefined limit
   to the length of content, recipients <bcp14>MUST</bcp14> anticipate potentially
   large decimal numerals and prevent parsing errors due to integer conversion
   overflows.

- section-14.2-4: 
   A server <bcp14>MUST</bcp14> ignore a Range header field received with a request method
   that is unrecognized or for which range handling is not defined. For this
   specification, <xref target="GET" format="none" sectionFormat="of" derivedContent="">GET</xref> is the only method for which range handling
   is defined.

- section-14.2-5: 
   An origin server <bcp14>MUST</bcp14> ignore a Range header field that contains a range
   unit it does not understand. A proxy <bcp14>MAY</bcp14> discard a Range header
   field that contains a range unit it does not understand.

- section-14.4-4: 
   Content-Range might also be sent as a request modifier to request a
   partial PUT, as described in <xref target="partial.PUT" format="default" sectionFormat="of" derivedContent="Section 14.5"/>, based on private
   agreements between client and origin server.
   A server <bcp14>MUST</bcp14> ignore a Content-Range header field received in a request
   with a method for which Content-Range support is not defined.

- section-15-4: 
   HTTP status codes are extensible. A client is not required to understand
   the meaning of all registered status codes, though such understanding is
   obviously desirable. However, a client <bcp14>MUST</bcp14> understand the class of any
   status code, as indicated by the first digit, and treat an unrecognized
   status code as being equivalent to the x00 status code of that class.

- section-15.2-3: 
   A client <bcp14>MUST</bcp14> be able to parse one or more 1xx responses received
   prior to a final response, even if the client does not expect one.
   A user agent <bcp14>MAY</bcp14> ignore unexpected 1xx responses.

- section-15.2-4: 
   A proxy <bcp14>MUST</bcp14> forward 1xx responses unless the proxy itself
   requested the generation of the 1xx response. For example, if a
   proxy adds an "Expect: 100-continue" header field when it forwards a request,
   then it need not forward the corresponding <xref target="status.100" format="none" sectionFormat="of" derivedContent="">100 (Continue)</xref>
   response(s).

- section-15.2.2-1: 
   The 101 (Switching Protocols) status code indicates that the
   server understands and is willing to comply with the client's request,
   via the <xref target="field.upgrade" format="none" sectionFormat="of" derivedContent="">Upgrade</xref> header field (<xref target="field.upgrade" format="default" sectionFormat="of" derivedContent="Section 7.8"/>), for
   a change in the application protocol being used on this connection.
   The server <bcp14>MUST</bcp14> generate an Upgrade header field in the response that
   indicates which protocol(s) will be in effect after this response.

- section-15.3.7-3: 
   A client <bcp14>MUST</bcp14> inspect a 206 response's <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> and
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> field(s) to determine what parts are enclosed
   and whether additional requests are needed.

- section-15.3.7-4: 
   A server that generates a 206 response <bcp14>MUST</bcp14> generate the following
   header fields, in addition to those required in the subsections below,
   if the field would
   have been sent in a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response to the same request:
   <xref target="field.date" format="none" sectionFormat="of" derivedContent="">Date</xref>, Cache-Control, <xref target="field.etag" format="none" sectionFormat="of" derivedContent="">ETag</xref>,
   Expires, <xref target="field.content-location" format="none" sectionFormat="of" derivedContent="">Content-Location</xref>, and
   <xref target="field.vary" format="none" sectionFormat="of" derivedContent="">Vary</xref>.

- section-15.3.7-6: 
   A sender that generates a 206 response to a request with an <xref target="field.if-range" format="none" sectionFormat="of" derivedContent="">If-Range</xref>
   header field <bcp14>SHOULD NOT</bcp14> generate other representation header
   fields beyond those required because the client
   already has a prior response containing those header fields.
   Otherwise, a sender <bcp14>MUST</bcp14> generate all of the representation header
   fields that would have been sent in a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response
   to the same request.

- section-15.3.7.1-1: 
   If a single part is being transferred, the server generating the 206
   response <bcp14>MUST</bcp14> generate a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field,
   describing what range of the selected representation is enclosed, and a
   content consisting of the range. For example:

- section-15.3.7.2-1: 
   If multiple parts are being transferred, the server generating the 206
   response <bcp14>MUST</bcp14> generate "multipart/byteranges" content, as defined
   in <xref target="multipart.byteranges" format="default" sectionFormat="of" derivedContent="Section 14.6"/>, and a
   <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> header field containing the
   "multipart/byteranges" media type and its required boundary parameter.
   To avoid confusion with single-part responses, a server <bcp14>MUST NOT</bcp14> generate
   a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field in the HTTP header section of a
   multiple part response (this field will be sent in each part instead).

- section-15.3.7.2-2: 
   Within the header area of each body part in the multipart content, the
   server <bcp14>MUST</bcp14> generate a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field
   corresponding to the range being enclosed in that body part.
   If the selected representation would have had a <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref>
   header field in a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response, the server <bcp14>SHOULD</bcp14>
   generate that same <xref target="field.content-type" format="none" sectionFormat="of" derivedContent="">Content-Type</xref> header field in the header area of
   each body part. For example:

- section-15.3.7.2-6: 
   A server that generates a multipart response <bcp14>SHOULD</bcp14> send
   the parts in the same order that the corresponding range-spec appeared
   in the received <xref target="field.range" format="none" sectionFormat="of" derivedContent="">Range</xref> header field, excluding those ranges
   that were deemed unsatisfiable or that were coalesced into other ranges.
   A client that receives a multipart response <bcp14>MUST</bcp14> inspect the
   <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header field present in each body part in
   order to determine which range is contained in that body part; a client
   cannot rely on receiving the same ranges that it requested, nor the same
   order that it requested.

- section-15.3.7.3-4: 
   If the most recent response is a <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref>
   response and at least one of the matching stored responses is a
   <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref>, then the combined response header fields consist
   of the most recent 200 response's header fields. If all of the matching
   stored responses are 206 responses, then the stored response with the most
   recent header fields is used as the source of header fields for the
   combined response, except that the client <bcp14>MUST</bcp14> use other header fields
   provided in the new response, aside from <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref>, to
   replace all instances of the corresponding header fields in the stored
   response.

- section-15.3.7.3-5: 
   The combined response content consists of the union of partial content
   ranges within the new response and all of the matching stored responses.
   If the union consists of the entire range of the representation, then the
   client <bcp14>MUST</bcp14> process the combined response as if it were a complete
   <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response, including a <xref target="field.content-length" format="none" sectionFormat="of" derivedContent="">Content-Length</xref>
   header field that reflects the complete length.
   Otherwise, the client <bcp14>MUST</bcp14> process the set of continuous ranges as one of
   the following:
   an incomplete <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response if the combined response is
   a prefix of the representation,
   a single <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> response containing
   "multipart/byteranges" content, or
   multiple <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> responses, each with one
   continuous range that is indicated by a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header
   field.

- section-15.3.7.3-5: 
   The combined response content consists of the union of partial content
   ranges within the new response and all of the matching stored responses.
   If the union consists of the entire range of the representation, then the
   client <bcp14>MUST</bcp14> process the combined response as if it were a complete
   <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response, including a <xref target="field.content-length" format="none" sectionFormat="of" derivedContent="">Content-Length</xref>
   header field that reflects the complete length.
   Otherwise, the client <bcp14>MUST</bcp14> process the set of continuous ranges as one of
   the following:
   an incomplete <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref> response if the combined response is
   a prefix of the representation,
   a single <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> response containing
   "multipart/byteranges" content, or
   multiple <xref target="status.206" format="none" sectionFormat="of" derivedContent="">206 (Partial Content)</xref> responses, each with one
   continuous range that is indicated by a <xref target="field.content-range" format="none" sectionFormat="of" derivedContent="">Content-Range</xref> header
   field.

- section-15.4.5-2: 
   The server generating a 304 response <bcp14>MUST</bcp14> generate any of the following
   header fields that would have been sent in a <xref target="status.200" format="none" sectionFormat="of" derivedContent="">200 (OK)</xref>
   response to the same request:

- section-15.5.2-1: 
   The 401 (Unauthorized) status code indicates that the
   request has not been applied because it lacks valid authentication
   credentials for the target resource.
   The server generating a 401 response <bcp14>MUST</bcp14> send a
   <xref target="field.www-authenticate" format="none" sectionFormat="of" derivedContent="">WWW-Authenticate</xref> header field
   (<xref target="field.www-authenticate" format="default" sectionFormat="of" derivedContent="Section 11.6.1"/>)
   containing at least one challenge applicable to the target resource.

- section-15.5.6-1: 
   The 405 (Method Not Allowed) status code indicates that the
   method received in the request-line is known by the origin server but
   not supported by the <xref target="target.resource" format="none" sectionFormat="of" derivedContent="">target resource</xref>.
   The origin server <bcp14>MUST</bcp14> generate an <xref target="field.allow" format="none" sectionFormat="of" derivedContent="">Allow</xref> header field in
   a 405 response containing a list of the target resource's currently
   supported methods.

- section-15.5.8-1: 
   The 407 (Proxy Authentication Required) status code is
   similar to <xref target="status.401" format="none" sectionFormat="of" derivedContent="">401 (Unauthorized)</xref>, but it indicates that the client
   needs to authenticate itself in order to use a proxy for this request.
   The proxy <bcp14>MUST</bcp14> send a <xref target="field.proxy-authenticate" format="none" sectionFormat="of" derivedContent="">Proxy-Authenticate</xref> header field
   (<xref target="field.proxy-authenticate" format="default" sectionFormat="of" derivedContent="Section 11.7.1"/>) containing a challenge
   applicable to that proxy for the request. The client <bcp14>MAY</bcp14> repeat
   the request with a new or replaced <xref target="field.proxy-authorization" format="none" sectionFormat="of" derivedContent="">Proxy-Authorization</xref>
   header field (<xref target="field.proxy-authorization" format="default" sectionFormat="of" derivedContent="Section 11.7.2"/>).

- section-15.5.22-1: 
   The 426 (Upgrade Required) status code indicates that the
   server refuses to perform the request using the current protocol but might
   be willing to do so after the client upgrades to a different protocol.
   The server <bcp14>MUST</bcp14> send an <xref target="field.upgrade" format="none" sectionFormat="of" derivedContent="">Upgrade</xref> header field in a 426
   response to indicate the required protocol(s) (<xref target="field.upgrade" format="default" sectionFormat="of" derivedContent="Section 7.8"/>).

- section-16.1.1-2: 
  HTTP method registrations <bcp14>MUST</bcp14> include the following fields:

- section-16.2.1-2: 
   A registration <bcp14>MUST</bcp14> include the following fields:

- section-16.4.1-2: 
  Registrations <bcp14>MUST</bcp14> include the following fields:

- section-16.4.2-2.1.1: 
    HTTP authentication is presumed to be stateless: all of the information
    necessary to authenticate a request <bcp14>MUST</bcp14> be provided in the request,
    rather than be dependent on the server remembering prior requests.
    Authentication based on, or bound to, the underlying connection is
    outside the scope of this specification and inherently flawed unless
    steps are taken to ensure that the connection cannot be used by any
    party other than the authenticated user
    (see <xref target="connections" format="default" sectionFormat="of" derivedContent="Section 3.3"/>).
              
- section-16.5.1-2: 
   Registration of an HTTP Range Unit <bcp14>MUST</bcp14> include the following fields:

- section-16.6.1-2: 
   Content coding registrations <bcp14>MUST</bcp14> include the following fields:

- section-16.6.1-5: 
   Values to be added to this namespace require IETF Review
   (see <xref target="RFC8126" section="4.8" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8126#section-4.8" derivedContent="RFC8126"/>) and <bcp14>MUST</bcp14>
   conform to the purpose of content coding defined in
   <xref target="content.codings" format="default" sectionFormat="of" derivedContent="Section 8.4.1"/>.

